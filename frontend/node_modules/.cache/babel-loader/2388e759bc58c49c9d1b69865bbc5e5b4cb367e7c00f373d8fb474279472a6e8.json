{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{supabase,getUserProfile,createUserProfile}from'../services/supabaseClient';// Define the shape of our auth context\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Create the context with a default undefined value\nconst AuthContext=/*#__PURE__*/createContext(undefined);// Props for the AuthProvider component\n// AuthProvider component\nexport const AuthProvider=_ref=>{let{children}=_ref;const[session,setSession]=useState(null);const[user,setUser]=useState(null);const[profile,setProfile]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// Initialize the auth state\nuseEffect(()=>{setLoading(true);// Get the current session\nconst fetchSession=async()=>{try{const{data:{session},error}=await supabase.auth.getSession();if(error){throw error;}setSession(session);setUser((session===null||session===void 0?void 0:session.user)||null);// Fetch user profile if user exists\nif(session!==null&&session!==void 0&&session.user){const{data,error:profileError}=await getUserProfile(session.user.id);if(profileError){console.error('Error fetching user profile:',profileError);}else{setProfile(data);}}}catch(error){console.error('Error initializing auth:',error.message);setError(error.message);}finally{setLoading(false);}};fetchSession();// Set up a listener for auth state changes\nconst{data:authListener}=supabase.auth.onAuthStateChange(async(event,newSession)=>{setSession(newSession);setUser((newSession===null||newSession===void 0?void 0:newSession.user)||null);setLoading(true);if(event==='SIGNED_IN'&&newSession!==null&&newSession!==void 0&&newSession.user){// Check if profile exists\nconst{data,error:profileError}=await getUserProfile(newSession.user.id);if(profileError||!data){// Create new profile if it doesn't exist\nconst{data:newProfile,error:createError}=await createUserProfile({id:newSession.user.id,blood_type:null,region:null,donation_count:0,last_donation_date:null});if(createError){console.error('Error creating user profile:',createError);}else{setProfile(newProfile);}}else{setProfile(data);}}else if(event==='SIGNED_OUT'){setProfile(null);}setLoading(false);});// Clean up subscription on unmount\nreturn()=>{authListener===null||authListener===void 0?void 0:authListener.subscription.unsubscribe();};},[]);// Sign up with email and password\nconst signUp=async(email,password)=>{try{setLoading(true);// Disable email verification by setting emailRedirectTo to the current URL\n// and setting the data.email_confirmed_at to the current time\nconst{error}=await supabase.auth.signUp({email,password,options:{// This will skip email verification\ndata:{email_confirmed:true}}});if(!error){// Auto sign in after signup\nawait supabase.auth.signInWithPassword({email,password});}return{error};}catch(error){console.error('Error signing up:',error.message);return{error};}finally{setLoading(false);}};// Sign in with email and password\nconst signIn=async(email,password)=>{try{setLoading(true);const{error}=await supabase.auth.signInWithPassword({email,password});return{error};}catch(error){console.error('Error signing in:',error.message);return{error};}finally{setLoading(false);}};// Sign out\nconst signOut=async()=>{try{setLoading(true);await supabase.auth.signOut();setProfile(null);}catch(error){console.error('Error signing out:',error.message);}finally{setLoading(false);}};// Reset password\nconst resetPassword=async email=>{try{setLoading(true);const{error}=await supabase.auth.resetPasswordForEmail(email);return{error};}catch(error){console.error('Error resetting password:',error.message);return{error};}finally{setLoading(false);}};// Update user profile\nconst updateProfile=async updates=>{try{setLoading(true);if(!user){return{error:new Error('No user logged in')};}const{data,error}=await supabase.from('user_profiles').update(updates).eq('id',user.id).select().single();if(error){throw error;}setProfile(data);return{error:null};}catch(error){console.error('Error updating profile:',error.message);return{error};}finally{setLoading(false);}};// Provide the auth context value\nconst value={session,user,profile,loading,error,signUp,signIn,signOut,resetPassword,updateProfile};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};// Custom hook to use the auth context\nexport const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","getUserProfile","createUserProfile","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","session","setSession","user","setUser","profile","setProfile","loading","setLoading","error","setError","fetchSession","data","auth","getSession","profileError","id","console","message","authListener","onAuthStateChange","event","newSession","newProfile","createError","blood_type","region","donation_count","last_donation_date","subscription","unsubscribe","signUp","email","password","options","email_confirmed","signInWithPassword","signIn","signOut","resetPassword","resetPasswordForEmail","updateProfile","updates","Error","from","update","eq","select","single","value","Provider","useAuth","context"],"sources":["C:/Users/yatir/finalProjectReact/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { Session, User } from '@supabase/supabase-js';\r\nimport { supabase, UserProfile, getUserProfile, createUserProfile } from '../services/supabaseClient';\r\n\r\n// Define the shape of our auth context\r\ninterface AuthContextType {\r\n  session: Session | null;\r\n  user: User | null;\r\n  profile: UserProfile | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  signUp: (email: string, password: string) => Promise<{ error: any }>;\r\n  signIn: (email: string, password: string) => Promise<{ error: any }>;\r\n  signOut: () => Promise<void>;\r\n  resetPassword: (email: string) => Promise<{ error: any }>;\r\n  updateProfile: (updates: Partial<UserProfile>) => Promise<{ error: any }>;\r\n}\r\n\r\n// Create the context with a default undefined value\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\n// Props for the AuthProvider component\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n// AuthProvider component\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [session, setSession] = useState<Session | null>(null);\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [profile, setProfile] = useState<UserProfile | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Initialize the auth state\r\n  useEffect(() => {\r\n    setLoading(true);\r\n\r\n    // Get the current session\r\n    const fetchSession = async () => {\r\n      try {\r\n        const { data: { session }, error } = await supabase.auth.getSession();\r\n        \r\n        if (error) {\r\n          throw error;\r\n        }\r\n\r\n        setSession(session);\r\n        setUser(session?.user || null);\r\n\r\n        // Fetch user profile if user exists\r\n        if (session?.user) {\r\n          const { data, error: profileError } = await getUserProfile(session.user.id);\r\n          \r\n          if (profileError) {\r\n            console.error('Error fetching user profile:', profileError);\r\n          } else {\r\n            setProfile(data);\r\n          }\r\n        }\r\n      } catch (error: any) {\r\n        console.error('Error initializing auth:', error.message);\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchSession();\r\n\r\n    // Set up a listener for auth state changes\r\n    const { data: authListener } = supabase.auth.onAuthStateChange(async (event, newSession) => {\r\n      setSession(newSession);\r\n      setUser(newSession?.user || null);\r\n      setLoading(true);\r\n\r\n      if (event === 'SIGNED_IN' && newSession?.user) {\r\n        // Check if profile exists\r\n        const { data, error: profileError } = await getUserProfile(newSession.user.id);\r\n        \r\n        if (profileError || !data) {\r\n          // Create new profile if it doesn't exist\r\n          const { data: newProfile, error: createError } = await createUserProfile({\r\n            id: newSession.user.id,\r\n            blood_type: null,\r\n            region: null,\r\n            donation_count: 0,\r\n            last_donation_date: null,\r\n          });\r\n          \r\n          if (createError) {\r\n            console.error('Error creating user profile:', createError);\r\n          } else {\r\n            setProfile(newProfile);\r\n          }\r\n        } else {\r\n          setProfile(data);\r\n        }\r\n      } else if (event === 'SIGNED_OUT') {\r\n        setProfile(null);\r\n      }\r\n      \r\n      setLoading(false);\r\n    });\r\n\r\n    // Clean up subscription on unmount\r\n    return () => {\r\n      authListener?.subscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  // Sign up with email and password\r\n  const signUp = async (email: string, password: string) => {\r\n    try {\r\n      setLoading(true);\r\n      // Disable email verification by setting emailRedirectTo to the current URL\r\n      // and setting the data.email_confirmed_at to the current time\r\n      const { error } = await supabase.auth.signUp({ \r\n        email, \r\n        password,\r\n        options: {\r\n          // This will skip email verification\r\n          data: {\r\n            email_confirmed: true\r\n          }\r\n        }\r\n      });\r\n      \r\n      if (!error) {\r\n        // Auto sign in after signup\r\n        await supabase.auth.signInWithPassword({ email, password });\r\n      }\r\n      \r\n      return { error };\r\n    } catch (error: any) {\r\n      console.error('Error signing up:', error.message);\r\n      return { error };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Sign in with email and password\r\n  const signIn = async (email: string, password: string) => {\r\n    try {\r\n      setLoading(true);\r\n      const { error } = await supabase.auth.signInWithPassword({ email, password });\r\n      return { error };\r\n    } catch (error: any) {\r\n      console.error('Error signing in:', error.message);\r\n      return { error };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Sign out\r\n  const signOut = async () => {\r\n    try {\r\n      setLoading(true);\r\n      await supabase.auth.signOut();\r\n      setProfile(null);\r\n    } catch (error: any) {\r\n      console.error('Error signing out:', error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Reset password\r\n  const resetPassword = async (email: string) => {\r\n    try {\r\n      setLoading(true);\r\n      const { error } = await supabase.auth.resetPasswordForEmail(email);\r\n      return { error };\r\n    } catch (error: any) {\r\n      console.error('Error resetting password:', error.message);\r\n      return { error };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Update user profile\r\n  const updateProfile = async (updates: Partial<UserProfile>) => {\r\n    try {\r\n      setLoading(true);\r\n      if (!user) {\r\n        return { error: new Error('No user logged in') };\r\n      }\r\n\r\n      const { data, error } = await supabase\r\n        .from('user_profiles')\r\n        .update(updates)\r\n        .eq('id', user.id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      setProfile(data);\r\n      return { error: null };\r\n    } catch (error: any) {\r\n      console.error('Error updating profile:', error.message);\r\n      return { error };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Provide the auth context value\r\n  const value = {\r\n    session,\r\n    user,\r\n    profile,\r\n    loading,\r\n    error,\r\n    signUp,\r\n    signIn,\r\n    signOut,\r\n    resetPassword,\r\n    updateProfile,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  \r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  \r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}