{"ast":null,"code":"import{createClient}from'@supabase/supabase-js';// Supabase configuration from environment variables\nconst supabaseUrl=process.env.REACT_APP_SUPABASE_URL||'';const supabaseAnonKey=process.env.REACT_APP_SUPABASE_ANON_KEY||'';// Create Supabase client\nexport const supabase=createClient(supabaseUrl,supabaseAnonKey);// Types for our database\n// Blood types functions\nexport const getBloodTypes=async()=>{console.log('Calling getBloodTypes from Supabase');const{data,error}=await supabase.from('blood_types').select('*').order('id');if(error){console.error('Supabase error in getBloodTypes:',error);}else{console.log(`Retrieved ${(data===null||data===void 0?void 0:data.length)||0} blood types`);}return{data,error};};// Blood compatibility functions\nexport const getBloodCompatibility=async()=>{console.log('Calling getBloodCompatibility from Supabase');const{data,error}=await supabase.from('blood_compatibility').select('*');if(error){console.error('Supabase error in getBloodCompatibility:',error);}else{console.log(`Retrieved ${(data===null||data===void 0?void 0:data.length)||0} compatibility records`);}return{data,error};};export const getCompatibleDonors=async bloodType=>{const{data,error}=await supabase.from('blood_compatibility').select('donor_type').eq('recipient_type',bloodType).eq('compatible',true);return{data:data?data.map(item=>item.donor_type):null,error};};export const getCompatibleRecipients=async bloodType=>{const{data,error}=await supabase.from('blood_compatibility').select('recipient_type').eq('donor_type',bloodType).eq('compatible',true);return{data:data?data.map(item=>item.recipient_type):null,error};};// Regional data functions\nexport const getRegionalData=async region=>{let query=supabase.from('regional_blood_data').select('*');if(region){query=query.ilike('region',`%${region}%`);}const{data,error}=await query;return{data,error};};// User profile functions\nexport const getUserProfile=async userId=>{const{data,error}=await supabase.from('user_profiles').select('*').eq('id',userId).single();return{data,error};};export const createUserProfile=async profile=>{const{data,error}=await supabase.from('user_profiles').insert(profile).select().single();return{data,error};};export const updateUserProfile=async(userId,updates)=>{const{data,error}=await supabase.from('user_profiles').update(updates).eq('id',userId).select().single();return{data,error};};// Quiz functions\nexport const getQuizQuestions=async function(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;let category=arguments.length>1?arguments[1]:undefined;let query=supabase.from('quiz_questions').select('*');if(category){query=query.eq('category',category);}const{data,error}=await query.limit(limit);return{data,error};};export const saveQuizResult=async result=>{const{data,error}=await supabase.from('quiz_results').insert(result).select().single();return{data,error};};export const getUserQuizResults=async userId=>{const{data,error}=await supabase.from('quiz_results').select('*').eq('user_id',userId).order('completed_at',{ascending:false});return{data,error};};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","supabase","getBloodTypes","console","log","data","error","from","select","order","length","getBloodCompatibility","getCompatibleDonors","bloodType","eq","map","item","donor_type","getCompatibleRecipients","recipient_type","getRegionalData","region","query","ilike","getUserProfile","userId","single","createUserProfile","profile","insert","updateUserProfile","updates","update","getQuizQuestions","limit","arguments","undefined","category","saveQuizResult","result","getUserQuizResults","ascending"],"sources":["C:/Users/yatir/finalProjectReact/frontend/src/services/supabaseClient.ts"],"sourcesContent":["import { createClient, SupabaseClient, User } from '@supabase/supabase-js';\r\n\r\n// Supabase configuration from environment variables\r\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL || '';\r\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || '';\r\n\r\n// Create Supabase client\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\n// Types for our database\r\nexport interface BloodType {\r\n  id: number;\r\n  type: string;\r\n  description: string;\r\n}\r\n\r\nexport interface BloodCompatibility {\r\n  id: number;\r\n  donor_type: string;\r\n  recipient_type: string;\r\n  compatible: boolean;\r\n}\r\n\r\nexport interface RegionalData {\r\n  id: number;\r\n  region: string;\r\n  population: number;\r\n  a_positive: number;\r\n  a_negative: number;\r\n  b_positive: number;\r\n  b_negative: number;\r\n  ab_positive: number;\r\n  ab_negative: number;\r\n  o_positive: number;\r\n  o_negative: number;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface UserProfile {\r\n  id: string;\r\n  blood_type: string | null;\r\n  region: string | null;\r\n  donation_count: number;\r\n  last_donation_date: string | null;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface QuizQuestion {\r\n  id: number;\r\n  question: string;\r\n  options: Record<string, string>;\r\n  correct_answer: string;\r\n  explanation: string;\r\n  category: string;\r\n  difficulty: string;\r\n}\r\n\r\nexport interface QuizResult {\r\n  id: number;\r\n  user_id: string;\r\n  score: number;\r\n  max_score: number;\r\n  completed_at: string;\r\n}\r\n\r\n// Blood types functions\r\nexport const getBloodTypes = async (): Promise<{ data: BloodType[] | null; error: any }> => {\r\n  console.log('Calling getBloodTypes from Supabase');\r\n  const { data, error } = await supabase\r\n    .from('blood_types')\r\n    .select('*')\r\n    .order('id');\r\n  \r\n  if (error) {\r\n    console.error('Supabase error in getBloodTypes:', error);\r\n  } else {\r\n    console.log(`Retrieved ${data?.length || 0} blood types`);\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\n// Blood compatibility functions\r\nexport const getBloodCompatibility = async (): Promise<{ data: BloodCompatibility[] | null; error: any }> => {\r\n  console.log('Calling getBloodCompatibility from Supabase');\r\n  const { data, error } = await supabase\r\n    .from('blood_compatibility')\r\n    .select('*');\r\n  \r\n  if (error) {\r\n    console.error('Supabase error in getBloodCompatibility:', error);\r\n  } else {\r\n    console.log(`Retrieved ${data?.length || 0} compatibility records`);\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const getCompatibleDonors = async (bloodType: string): Promise<{ data: string[] | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('blood_compatibility')\r\n    .select('donor_type')\r\n    .eq('recipient_type', bloodType)\r\n    .eq('compatible', true);\r\n  \r\n  return { \r\n    data: data ? data.map(item => item.donor_type) : null, \r\n    error \r\n  };\r\n};\r\n\r\nexport const getCompatibleRecipients = async (bloodType: string): Promise<{ data: string[] | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('blood_compatibility')\r\n    .select('recipient_type')\r\n    .eq('donor_type', bloodType)\r\n    .eq('compatible', true);\r\n  \r\n  return { \r\n    data: data ? data.map(item => item.recipient_type) : null, \r\n    error \r\n  };\r\n};\r\n\r\n// Regional data functions\r\nexport const getRegionalData = async (region?: string): Promise<{ data: RegionalData[] | null; error: any }> => {\r\n  let query = supabase.from('regional_blood_data').select('*');\r\n  \r\n  if (region) {\r\n    query = query.ilike('region', `%${region}%`);\r\n  }\r\n  \r\n  const { data, error } = await query;\r\n  return { data, error };\r\n};\r\n\r\n// User profile functions\r\nexport const getUserProfile = async (userId: string): Promise<{ data: UserProfile | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('user_profiles')\r\n    .select('*')\r\n    .eq('id', userId)\r\n    .single();\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const createUserProfile = async (profile: Partial<UserProfile>): Promise<{ data: UserProfile | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('user_profiles')\r\n    .insert(profile)\r\n    .select()\r\n    .single();\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const updateUserProfile = async (userId: string, updates: Partial<UserProfile>): Promise<{ data: UserProfile | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('user_profiles')\r\n    .update(updates)\r\n    .eq('id', userId)\r\n    .select()\r\n    .single();\r\n  \r\n  return { data, error };\r\n};\r\n\r\n// Quiz functions\r\nexport const getQuizQuestions = async (limit = 10, category?: string): Promise<{ data: QuizQuestion[] | null; error: any }> => {\r\n  let query = supabase.from('quiz_questions').select('*');\r\n  \r\n  if (category) {\r\n    query = query.eq('category', category);\r\n  }\r\n  \r\n  const { data, error } = await query.limit(limit);\r\n  return { data, error };\r\n};\r\n\r\nexport const saveQuizResult = async (result: Omit<QuizResult, 'id' | 'completed_at'>): Promise<{ data: QuizResult | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('quiz_results')\r\n    .insert(result)\r\n    .select()\r\n    .single();\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const getUserQuizResults = async (userId: string): Promise<{ data: QuizResult[] | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('quiz_results')\r\n    .select('*')\r\n    .eq('user_id', userId)\r\n    .order('completed_at', { ascending: false });\r\n  \r\n  return { data, error };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}