{"ast":null,"code":"import { supabase } from './supabaseClient';\n\n// Types for the dashboard\n\n// Donation functions\nexport const getUserDonations = async userId => {\n  console.log('Fetching donations for user:', userId);\n  const {\n    data,\n    error\n  } = await supabase.from('donations').select('*').eq('user_id', userId).order('donation_date', {\n    ascending: false\n  });\n  if (error) {\n    console.error('Error fetching user donations:', error);\n  } else {\n    console.log(`Retrieved ${(data === null || data === void 0 ? void 0 : data.length) || 0} donations`);\n  }\n  return {\n    data,\n    error\n  };\n};\nexport const addDonation = async donation => {\n  console.log('Adding new donation:', donation);\n  const {\n    data,\n    error\n  } = await supabase.from('donations').insert(donation).select().single();\n  if (error) {\n    console.error('Error adding donation:', error);\n  } else {\n    console.log('Donation added successfully');\n  }\n  return {\n    data,\n    error\n  };\n};\nexport const updateDonation = async (id, updates) => {\n  console.log(`Updating donation ${id}:`, updates);\n  const {\n    data,\n    error\n  } = await supabase.from('donations').update(updates).eq('id', id).select().single();\n  if (error) {\n    console.error('Error updating donation:', error);\n  } else {\n    console.log('Donation updated successfully');\n  }\n  return {\n    data,\n    error\n  };\n};\nexport const deleteDonation = async id => {\n  console.log(`Deleting donation ${id}`);\n  const {\n    error\n  } = await supabase.from('donations').delete().eq('id', id);\n  if (error) {\n    console.error('Error deleting donation:', error);\n  } else {\n    console.log('Donation deleted successfully');\n  }\n  return {\n    error\n  };\n};\n\n// Donation Goals functions\nexport const getUserDonationGoals = async userId => {\n  console.log('Fetching donation goals for user:', userId);\n  const {\n    data,\n    error\n  } = await supabase.from('donation_goals').select('*').eq('user_id', userId).order('target_date', {\n    ascending: true\n  });\n  if (error) {\n    console.error('Error fetching user donation goals:', error);\n  } else {\n    console.log(`Retrieved ${(data === null || data === void 0 ? void 0 : data.length) || 0} donation goals`);\n  }\n  return {\n    data,\n    error\n  };\n};\nexport const addDonationGoal = async goal => {\n  console.log('Adding new donation goal:', goal);\n  const {\n    data,\n    error\n  } = await supabase.from('donation_goals').insert(goal).select().single();\n  if (error) {\n    console.error('Error adding donation goal:', error);\n  } else {\n    console.log('Donation goal added successfully');\n  }\n  return {\n    data,\n    error\n  };\n};\nexport const updateDonationGoal = async (id, updates) => {\n  console.log(`Updating donation goal ${id}:`, updates);\n  const {\n    data,\n    error\n  } = await supabase.from('donation_goals').update({\n    ...updates,\n    updated_at: new Date().toISOString()\n  }).eq('id', id).select().single();\n  if (error) {\n    console.error('Error updating donation goal:', error);\n  } else {\n    console.log('Donation goal updated successfully');\n  }\n  return {\n    data,\n    error\n  };\n};\n\n// Achievements functions\nexport const getAllAchievements = async () => {\n  console.log('Fetching all achievements');\n  const {\n    data,\n    error\n  } = await supabase.from('achievements').select('*').order('id');\n  if (error) {\n    console.error('Error fetching achievements:', error);\n  } else {\n    console.log(`Retrieved ${(data === null || data === void 0 ? void 0 : data.length) || 0} achievements`);\n  }\n  return {\n    data,\n    error\n  };\n};\nexport const getUserAchievements = async userId => {\n  console.log('Fetching achievements for user:', userId);\n  const {\n    data,\n    error\n  } = await supabase.from('user_achievements').select(`\n      *,\n      achievement:achievements(*)\n    `).eq('user_id', userId).order('earned_at', {\n    ascending: false\n  });\n  if (error) {\n    console.error('Error fetching user achievements:', error);\n  } else {\n    console.log(`Retrieved ${(data === null || data === void 0 ? void 0 : data.length) || 0} user achievements`);\n  }\n  return {\n    data,\n    error\n  };\n};\nexport const addUserAchievement = async (userId, achievementId) => {\n  console.log(`Adding achievement ${achievementId} to user ${userId}`);\n  const {\n    data,\n    error\n  } = await supabase.from('user_achievements').insert({\n    user_id: userId,\n    achievement_id: achievementId\n  }).select().single();\n  if (error) {\n    console.error('Error adding user achievement:', error);\n  } else {\n    console.log('User achievement added successfully');\n  }\n  return {\n    data,\n    error\n  };\n};\n\n// Reminders functions\nexport const getUserReminders = async userId => {\n  console.log('Fetching reminders for user:', userId);\n  const {\n    data,\n    error\n  } = await supabase.from('donation_reminders').select('*').eq('user_id', userId).order('reminder_date', {\n    ascending: true\n  });\n  if (error) {\n    console.error('Error fetching user reminders:', error);\n  } else {\n    console.log(`Retrieved ${(data === null || data === void 0 ? void 0 : data.length) || 0} reminders`);\n  }\n  return {\n    data,\n    error\n  };\n};\nexport const addReminder = async reminder => {\n  console.log('Adding new reminder:', reminder);\n  const {\n    data,\n    error\n  } = await supabase.from('donation_reminders').insert(reminder).select().single();\n  if (error) {\n    console.error('Error adding reminder:', error);\n  } else {\n    console.log('Reminder added successfully');\n  }\n  return {\n    data,\n    error\n  };\n};\nexport const markReminderAsRead = async id => {\n  console.log(`Marking reminder ${id} as read`);\n  const {\n    data,\n    error\n  } = await supabase.from('donation_reminders').update({\n    is_read: true\n  }).eq('id', id).select().single();\n  if (error) {\n    console.error('Error marking reminder as read:', error);\n  } else {\n    console.log('Reminder marked as read successfully');\n  }\n  return {\n    data,\n    error\n  };\n};\n\n// Utility functions for dashboard\nexport const calculateNextDonationDate = lastDonationDate => {\n  // Typically, donors can donate whole blood every 56 days (8 weeks)\n  const lastDonation = new Date(lastDonationDate);\n  const nextDonation = new Date(lastDonation);\n  nextDonation.setDate(lastDonation.getDate() + 56);\n  return nextDonation;\n};\nexport const checkEligibleAchievements = async (userId, donationCount) => {\n  console.log(`Checking eligible achievements for user ${userId} with ${donationCount} donations`);\n\n  // Get all achievements\n  const {\n    data: allAchievements\n  } = await getAllAchievements();\n  if (!allAchievements) return [];\n\n  // Get user's existing achievements\n  const {\n    data: userAchievements\n  } = await getUserAchievements(userId);\n  const existingAchievementIds = (userAchievements === null || userAchievements === void 0 ? void 0 : userAchievements.map(ua => ua.achievement_id)) || [];\n\n  // Filter achievements user is eligible for but doesn't have yet\n  const eligibleAchievements = allAchievements.filter(achievement => {\n    // Skip if user already has this achievement\n    if (existingAchievementIds.includes(achievement.id)) return false;\n\n    // Check donation count based achievements\n    if (achievement.criteria.includes('Complete ')) {\n      const requiredCount = parseInt(achievement.criteria.split('Complete ')[1].split(' ')[0]);\n      return donationCount >= requiredCount;\n    }\n    return false;\n  });\n  console.log(`Found ${eligibleAchievements.length} eligible achievements`);\n  return eligibleAchievements;\n};","map":{"version":3,"names":["supabase","getUserDonations","userId","console","log","data","error","from","select","eq","order","ascending","length","addDonation","donation","insert","single","updateDonation","id","updates","update","deleteDonation","delete","getUserDonationGoals","addDonationGoal","goal","updateDonationGoal","updated_at","Date","toISOString","getAllAchievements","getUserAchievements","addUserAchievement","achievementId","user_id","achievement_id","getUserReminders","addReminder","reminder","markReminderAsRead","is_read","calculateNextDonationDate","lastDonationDate","lastDonation","nextDonation","setDate","getDate","checkEligibleAchievements","donationCount","allAchievements","userAchievements","existingAchievementIds","map","ua","eligibleAchievements","filter","achievement","includes","criteria","requiredCount","parseInt","split"],"sources":["C:/Users/yatir/finalProjectReact/frontend/src/services/dashboardService.ts"],"sourcesContent":["import { supabase } from './supabaseClient';\r\n\r\n// Types for the dashboard\r\nexport interface Donation {\r\n  id: number;\r\n  user_id: string;\r\n  donation_date: string;\r\n  donation_center: string;\r\n  blood_amount_ml: number;\r\n  donation_type: string;\r\n  notes: string;\r\n  created_at: string;\r\n}\r\n\r\nexport interface DonationGoal {\r\n  id: number;\r\n  user_id: string;\r\n  target_count: number;\r\n  target_date: string | null;\r\n  title: string;\r\n  description: string | null;\r\n  is_completed: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface Achievement {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  icon_url: string;\r\n  criteria: string;\r\n  created_at: string;\r\n}\r\n\r\nexport interface UserAchievement {\r\n  id: number;\r\n  user_id: string;\r\n  achievement_id: number;\r\n  earned_at: string;\r\n  achievement?: Achievement; // Join with achievements table\r\n}\r\n\r\nexport interface DonationReminder {\r\n  id: number;\r\n  user_id: string;\r\n  reminder_date: string;\r\n  title: string;\r\n  message: string | null;\r\n  is_read: boolean;\r\n  created_at: string;\r\n}\r\n\r\n// Donation functions\r\nexport const getUserDonations = async (userId: string): Promise<{ data: Donation[] | null; error: any }> => {\r\n  console.log('Fetching donations for user:', userId);\r\n  const { data, error } = await supabase\r\n    .from('donations')\r\n    .select('*')\r\n    .eq('user_id', userId)\r\n    .order('donation_date', { ascending: false });\r\n  \r\n  if (error) {\r\n    console.error('Error fetching user donations:', error);\r\n  } else {\r\n    console.log(`Retrieved ${data?.length || 0} donations`);\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const addDonation = async (donation: Omit<Donation, 'id' | 'created_at'>): Promise<{ data: Donation | null; error: any }> => {\r\n  console.log('Adding new donation:', donation);\r\n  const { data, error } = await supabase\r\n    .from('donations')\r\n    .insert(donation)\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) {\r\n    console.error('Error adding donation:', error);\r\n  } else {\r\n    console.log('Donation added successfully');\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const updateDonation = async (id: number, updates: Partial<Donation>): Promise<{ data: Donation | null; error: any }> => {\r\n  console.log(`Updating donation ${id}:`, updates);\r\n  const { data, error } = await supabase\r\n    .from('donations')\r\n    .update(updates)\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) {\r\n    console.error('Error updating donation:', error);\r\n  } else {\r\n    console.log('Donation updated successfully');\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const deleteDonation = async (id: number): Promise<{ error: any }> => {\r\n  console.log(`Deleting donation ${id}`);\r\n  const { error } = await supabase\r\n    .from('donations')\r\n    .delete()\r\n    .eq('id', id);\r\n  \r\n  if (error) {\r\n    console.error('Error deleting donation:', error);\r\n  } else {\r\n    console.log('Donation deleted successfully');\r\n  }\r\n  \r\n  return { error };\r\n};\r\n\r\n// Donation Goals functions\r\nexport const getUserDonationGoals = async (userId: string): Promise<{ data: DonationGoal[] | null; error: any }> => {\r\n  console.log('Fetching donation goals for user:', userId);\r\n  const { data, error } = await supabase\r\n    .from('donation_goals')\r\n    .select('*')\r\n    .eq('user_id', userId)\r\n    .order('target_date', { ascending: true });\r\n  \r\n  if (error) {\r\n    console.error('Error fetching user donation goals:', error);\r\n  } else {\r\n    console.log(`Retrieved ${data?.length || 0} donation goals`);\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const addDonationGoal = async (goal: Omit<DonationGoal, 'id' | 'created_at' | 'updated_at'>): Promise<{ data: DonationGoal | null; error: any }> => {\r\n  console.log('Adding new donation goal:', goal);\r\n  const { data, error } = await supabase\r\n    .from('donation_goals')\r\n    .insert(goal)\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) {\r\n    console.error('Error adding donation goal:', error);\r\n  } else {\r\n    console.log('Donation goal added successfully');\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const updateDonationGoal = async (id: number, updates: Partial<DonationGoal>): Promise<{ data: DonationGoal | null; error: any }> => {\r\n  console.log(`Updating donation goal ${id}:`, updates);\r\n  const { data, error } = await supabase\r\n    .from('donation_goals')\r\n    .update({\r\n      ...updates,\r\n      updated_at: new Date().toISOString()\r\n    })\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) {\r\n    console.error('Error updating donation goal:', error);\r\n  } else {\r\n    console.log('Donation goal updated successfully');\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\n// Achievements functions\r\nexport const getAllAchievements = async (): Promise<{ data: Achievement[] | null; error: any }> => {\r\n  console.log('Fetching all achievements');\r\n  const { data, error } = await supabase\r\n    .from('achievements')\r\n    .select('*')\r\n    .order('id');\r\n  \r\n  if (error) {\r\n    console.error('Error fetching achievements:', error);\r\n  } else {\r\n    console.log(`Retrieved ${data?.length || 0} achievements`);\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const getUserAchievements = async (userId: string): Promise<{ data: UserAchievement[] | null; error: any }> => {\r\n  console.log('Fetching achievements for user:', userId);\r\n  const { data, error } = await supabase\r\n    .from('user_achievements')\r\n    .select(`\r\n      *,\r\n      achievement:achievements(*)\r\n    `)\r\n    .eq('user_id', userId)\r\n    .order('earned_at', { ascending: false });\r\n  \r\n  if (error) {\r\n    console.error('Error fetching user achievements:', error);\r\n  } else {\r\n    console.log(`Retrieved ${data?.length || 0} user achievements`);\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const addUserAchievement = async (userId: string, achievementId: number): Promise<{ data: UserAchievement | null; error: any }> => {\r\n  console.log(`Adding achievement ${achievementId} to user ${userId}`);\r\n  const { data, error } = await supabase\r\n    .from('user_achievements')\r\n    .insert({\r\n      user_id: userId,\r\n      achievement_id: achievementId\r\n    })\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) {\r\n    console.error('Error adding user achievement:', error);\r\n  } else {\r\n    console.log('User achievement added successfully');\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\n// Reminders functions\r\nexport const getUserReminders = async (userId: string): Promise<{ data: DonationReminder[] | null; error: any }> => {\r\n  console.log('Fetching reminders for user:', userId);\r\n  const { data, error } = await supabase\r\n    .from('donation_reminders')\r\n    .select('*')\r\n    .eq('user_id', userId)\r\n    .order('reminder_date', { ascending: true });\r\n  \r\n  if (error) {\r\n    console.error('Error fetching user reminders:', error);\r\n  } else {\r\n    console.log(`Retrieved ${data?.length || 0} reminders`);\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const addReminder = async (reminder: Omit<DonationReminder, 'id' | 'created_at'>): Promise<{ data: DonationReminder | null; error: any }> => {\r\n  console.log('Adding new reminder:', reminder);\r\n  const { data, error } = await supabase\r\n    .from('donation_reminders')\r\n    .insert(reminder)\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) {\r\n    console.error('Error adding reminder:', error);\r\n  } else {\r\n    console.log('Reminder added successfully');\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const markReminderAsRead = async (id: number): Promise<{ data: DonationReminder | null; error: any }> => {\r\n  console.log(`Marking reminder ${id} as read`);\r\n  const { data, error } = await supabase\r\n    .from('donation_reminders')\r\n    .update({ is_read: true })\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) {\r\n    console.error('Error marking reminder as read:', error);\r\n  } else {\r\n    console.log('Reminder marked as read successfully');\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\n// Utility functions for dashboard\r\nexport const calculateNextDonationDate = (lastDonationDate: string): Date => {\r\n  // Typically, donors can donate whole blood every 56 days (8 weeks)\r\n  const lastDonation = new Date(lastDonationDate);\r\n  const nextDonation = new Date(lastDonation);\r\n  nextDonation.setDate(lastDonation.getDate() + 56);\r\n  return nextDonation;\r\n};\r\n\r\nexport const checkEligibleAchievements = async (userId: string, donationCount: number): Promise<Achievement[]> => {\r\n  console.log(`Checking eligible achievements for user ${userId} with ${donationCount} donations`);\r\n  \r\n  // Get all achievements\r\n  const { data: allAchievements } = await getAllAchievements();\r\n  if (!allAchievements) return [];\r\n  \r\n  // Get user's existing achievements\r\n  const { data: userAchievements } = await getUserAchievements(userId);\r\n  const existingAchievementIds = userAchievements?.map(ua => ua.achievement_id) || [];\r\n  \r\n  // Filter achievements user is eligible for but doesn't have yet\r\n  const eligibleAchievements = allAchievements.filter(achievement => {\r\n    // Skip if user already has this achievement\r\n    if (existingAchievementIds.includes(achievement.id)) return false;\r\n    \r\n    // Check donation count based achievements\r\n    if (achievement.criteria.includes('Complete ')) {\r\n      const requiredCount = parseInt(achievement.criteria.split('Complete ')[1].split(' ')[0]);\r\n      return donationCount >= requiredCount;\r\n    }\r\n    \r\n    return false;\r\n  });\r\n  \r\n  console.log(`Found ${eligibleAchievements.length} eligible achievements`);\r\n  return eligibleAchievements;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}