{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yatir\\\\finalProjectReact\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase, getUserProfile, createUserProfile } from '../services/supabaseClient';\n\n// Define the shape of our auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context with a default undefined value\nconst AuthContext = /*#__PURE__*/createContext(undefined);\n\n// Props for the AuthProvider component\n\n// AuthProvider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [session, setSession] = useState(null);\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initialize the auth state\n  useEffect(() => {\n    setLoading(true);\n    console.log('AuthProvider: Initializing auth state...');\n\n    // Get the current session\n    const fetchSession = async () => {\n      try {\n        var _data$session, _data$session2;\n        console.log('AuthProvider: Fetching session...');\n        const {\n          data,\n          error\n        } = await supabase.auth.getSession();\n        if (error) {\n          console.error('AuthProvider: Error getting session:', error);\n          throw error;\n        }\n        console.log('AuthProvider: Session data:', data !== null && data !== void 0 && data.session ? 'Session exists' : 'No session');\n        setSession(data.session);\n        setUser(((_data$session = data.session) === null || _data$session === void 0 ? void 0 : _data$session.user) || null);\n\n        // Fetch user profile if user exists\n        if ((_data$session2 = data.session) !== null && _data$session2 !== void 0 && _data$session2.user) {\n          console.log('AuthProvider: User exists, fetching profile...');\n          const {\n            data: profileData,\n            error: profileError\n          } = await getUserProfile(data.session.user.id);\n          if (profileError) {\n            console.error('AuthProvider: Error fetching user profile:', profileError);\n          } else {\n            console.log('AuthProvider: Profile fetched successfully');\n            setProfile(profileData);\n          }\n        }\n      } catch (error) {\n        console.error('AuthProvider: Error initializing auth:', error.message);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSession();\n\n    // Set up a listener for auth state changes\n    const {\n      data: authListener\n    } = supabase.auth.onAuthStateChange(async (event, newSession) => {\n      console.log('AuthProvider: Auth state changed:', event);\n      setSession(newSession);\n      setUser((newSession === null || newSession === void 0 ? void 0 : newSession.user) || null);\n      setLoading(true);\n      if (event === 'SIGNED_IN' && newSession !== null && newSession !== void 0 && newSession.user) {\n        console.log('AuthProvider: User signed in, checking profile...');\n        // Check if profile exists\n        const {\n          data,\n          error: profileError\n        } = await getUserProfile(newSession.user.id);\n        if (profileError || !data) {\n          console.log('AuthProvider: Profile not found, creating new profile...');\n          // Create new profile if it doesn't exist\n          const {\n            data: newProfile,\n            error: createError\n          } = await createUserProfile({\n            id: newSession.user.id,\n            blood_type: null,\n            region: null,\n            donation_count: 0,\n            last_donation_date: null\n          });\n          if (createError) {\n            console.error('AuthProvider: Error creating user profile:', createError);\n          } else {\n            console.log('AuthProvider: New profile created successfully');\n            setProfile(newProfile);\n          }\n        } else {\n          console.log('AuthProvider: Existing profile found');\n          setProfile(data);\n        }\n      } else if (event === 'SIGNED_OUT') {\n        console.log('AuthProvider: User signed out');\n        setProfile(null);\n      }\n      setLoading(false);\n    });\n\n    // Clean up subscription on unmount\n    return () => {\n      console.log('AuthProvider: Cleaning up auth listener');\n      authListener === null || authListener === void 0 ? void 0 : authListener.subscription.unsubscribe();\n    };\n  }, []);\n\n  // Sign up with email and password\n  const signUp = async (email, password) => {\n    try {\n      console.log('AuthProvider: Signing up user:', email);\n      setLoading(true);\n      const {\n        data,\n        error\n      } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          // This will skip email verification\n          data: {\n            email_confirmed: true\n          }\n        }\n      });\n      if (error) {\n        console.error('AuthProvider: Sign up error:', error);\n      } else {\n        var _data$user;\n        console.log('AuthProvider: Sign up successful, user created:', data === null || data === void 0 ? void 0 : (_data$user = data.user) === null || _data$user === void 0 ? void 0 : _data$user.id);\n\n        // Auto sign in after signup\n        console.log('AuthProvider: Auto signing in after signup...');\n        await supabase.auth.signInWithPassword({\n          email,\n          password\n        });\n      }\n      return {\n        error\n      };\n    } catch (error) {\n      console.error('AuthProvider: Exception during sign up:', error.message);\n      return {\n        error\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Sign in with email and password\n  const signIn = async (email, password) => {\n    try {\n      console.log('AuthProvider: Signing in user:', email);\n      setLoading(true);\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) {\n        console.error('AuthProvider: Sign in error:', error);\n      } else {\n        var _data$user2;\n        console.log('AuthProvider: Sign in successful, user:', data === null || data === void 0 ? void 0 : (_data$user2 = data.user) === null || _data$user2 === void 0 ? void 0 : _data$user2.id);\n      }\n      return {\n        error\n      };\n    } catch (error) {\n      console.error('AuthProvider: Exception during sign in:', error.message);\n      return {\n        error\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Sign out\n  const signOut = async () => {\n    try {\n      console.log('AuthProvider: Signing out user...');\n      setLoading(true);\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) {\n        console.error('AuthProvider: Error signing out:', error);\n        throw error;\n      }\n      console.log('AuthProvider: Sign out successful, clearing user state');\n      // Clear all auth state\n      setUser(null);\n      setSession(null);\n      setProfile(null);\n\n      // Force a page reload to ensure all state is cleared\n      window.location.href = '/';\n      return {\n        error: null\n      };\n    } catch (error) {\n      console.error('AuthProvider: Exception during sign out:', error.message);\n      return {\n        error\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reset password\n  const resetPassword = async email => {\n    try {\n      setLoading(true);\n      const {\n        error\n      } = await supabase.auth.resetPasswordForEmail(email);\n      return {\n        error\n      };\n    } catch (error) {\n      console.error('Error resetting password:', error.message);\n      return {\n        error\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async updates => {\n    try {\n      setLoading(true);\n      if (!user) {\n        return {\n          error: new Error('No user logged in')\n        };\n      }\n      const {\n        data,\n        error\n      } = await supabase.from('user_profiles').update(updates).eq('id', user.id).select().single();\n      if (error) {\n        throw error;\n      }\n      setProfile(data);\n      return {\n        error: null\n      };\n    } catch (error) {\n      console.error('Error updating profile:', error.message);\n      return {\n        error\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Provide the auth context value\n  const value = {\n    session,\n    user,\n    profile,\n    loading,\n    error,\n    signUp,\n    signIn,\n    signOut,\n    resetPassword,\n    updateProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook to use the auth context\n_s(AuthProvider, \"dWDCAND/983j+iFrIFYEmcKfP9Y=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","getUserProfile","createUserProfile","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","session","setSession","user","setUser","profile","setProfile","loading","setLoading","error","setError","console","log","fetchSession","_data$session","_data$session2","data","auth","getSession","profileData","profileError","id","message","authListener","onAuthStateChange","event","newSession","newProfile","createError","blood_type","region","donation_count","last_donation_date","subscription","unsubscribe","signUp","email","password","options","email_confirmed","_data$user","signInWithPassword","signIn","_data$user2","signOut","window","location","href","resetPassword","resetPasswordForEmail","updateProfile","updates","Error","from","update","eq","select","single","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/yatir/finalProjectReact/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { Session, User } from '@supabase/supabase-js';\nimport { supabase, UserProfile, getUserProfile, createUserProfile } from '../services/supabaseClient';\n\n// Define the shape of our auth context\ninterface AuthContextType {\n  session: Session | null;\n  user: User | null;\n  profile: UserProfile | null;\n  loading: boolean;\n  error: string | null;\n  signUp: (email: string, password: string) => Promise<{ error: any }>;\n  signIn: (email: string, password: string) => Promise<{ error: any }>;\n  signOut: () => Promise<{ error: any | null }>;\n  resetPassword: (email: string) => Promise<{ error: any }>;\n  updateProfile: (updates: Partial<UserProfile>) => Promise<{ error: any }>;\n}\n\n// Create the context with a default undefined value\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Props for the AuthProvider component\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\n// AuthProvider component\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [session, setSession] = useState<Session | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Initialize the auth state\n  useEffect(() => {\n    setLoading(true);\n    console.log('AuthProvider: Initializing auth state...');\n\n    // Get the current session\n    const fetchSession = async () => {\n      try {\n        console.log('AuthProvider: Fetching session...');\n        const { data, error } = await supabase.auth.getSession();\n        \n        if (error) {\n          console.error('AuthProvider: Error getting session:', error);\n          throw error;\n        }\n\n        console.log('AuthProvider: Session data:', data?.session ? 'Session exists' : 'No session');\n        setSession(data.session);\n        setUser(data.session?.user || null);\n\n        // Fetch user profile if user exists\n        if (data.session?.user) {\n          console.log('AuthProvider: User exists, fetching profile...');\n          const { data: profileData, error: profileError } = await getUserProfile(data.session.user.id);\n          \n          if (profileError) {\n            console.error('AuthProvider: Error fetching user profile:', profileError);\n          } else {\n            console.log('AuthProvider: Profile fetched successfully');\n            setProfile(profileData);\n          }\n        }\n      } catch (error: any) {\n        console.error('AuthProvider: Error initializing auth:', error.message);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchSession();\n\n    // Set up a listener for auth state changes\n    const { data: authListener } = supabase.auth.onAuthStateChange(async (event, newSession) => {\n      console.log('AuthProvider: Auth state changed:', event);\n      setSession(newSession);\n      setUser(newSession?.user || null);\n      setLoading(true);\n\n      if (event === 'SIGNED_IN' && newSession?.user) {\n        console.log('AuthProvider: User signed in, checking profile...');\n        // Check if profile exists\n        const { data, error: profileError } = await getUserProfile(newSession.user.id);\n        \n        if (profileError || !data) {\n          console.log('AuthProvider: Profile not found, creating new profile...');\n          // Create new profile if it doesn't exist\n          const { data: newProfile, error: createError } = await createUserProfile({\n            id: newSession.user.id,\n            blood_type: null,\n            region: null,\n            donation_count: 0,\n            last_donation_date: null,\n          });\n          \n          if (createError) {\n            console.error('AuthProvider: Error creating user profile:', createError);\n          } else {\n            console.log('AuthProvider: New profile created successfully');\n            setProfile(newProfile);\n          }\n        } else {\n          console.log('AuthProvider: Existing profile found');\n          setProfile(data);\n        }\n      } else if (event === 'SIGNED_OUT') {\n        console.log('AuthProvider: User signed out');\n        setProfile(null);\n      }\n      \n      setLoading(false);\n    });\n\n    // Clean up subscription on unmount\n    return () => {\n      console.log('AuthProvider: Cleaning up auth listener');\n      authListener?.subscription.unsubscribe();\n    };\n  }, []);\n\n  // Sign up with email and password\n  const signUp = async (email: string, password: string) => {\n    try {\n      console.log('AuthProvider: Signing up user:', email);\n      setLoading(true);\n      \n      const { data, error } = await supabase.auth.signUp({ \n        email, \n        password,\n        options: {\n          // This will skip email verification\n          data: {\n            email_confirmed: true\n          }\n        }\n      });\n      \n      if (error) {\n        console.error('AuthProvider: Sign up error:', error);\n      } else {\n        console.log('AuthProvider: Sign up successful, user created:', data?.user?.id);\n        \n        // Auto sign in after signup\n        console.log('AuthProvider: Auto signing in after signup...');\n        await supabase.auth.signInWithPassword({ email, password });\n      }\n      \n      return { error };\n    } catch (error: any) {\n      console.error('AuthProvider: Exception during sign up:', error.message);\n      return { error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Sign in with email and password\n  const signIn = async (email: string, password: string) => {\n    try {\n      console.log('AuthProvider: Signing in user:', email);\n      setLoading(true);\n      \n      const { data, error } = await supabase.auth.signInWithPassword({ email, password });\n      \n      if (error) {\n        console.error('AuthProvider: Sign in error:', error);\n      } else {\n        console.log('AuthProvider: Sign in successful, user:', data?.user?.id);\n      }\n      \n      return { error };\n    } catch (error: any) {\n      console.error('AuthProvider: Exception during sign in:', error.message);\n      return { error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Sign out\n  const signOut = async () => {\n    try {\n      console.log('AuthProvider: Signing out user...');\n      setLoading(true);\n      \n      const { error } = await supabase.auth.signOut();\n      \n      if (error) {\n        console.error('AuthProvider: Error signing out:', error);\n        throw error;\n      }\n      \n      console.log('AuthProvider: Sign out successful, clearing user state');\n      // Clear all auth state\n      setUser(null);\n      setSession(null);\n      setProfile(null);\n      \n      // Force a page reload to ensure all state is cleared\n      window.location.href = '/';\n      \n      return { error: null };\n    } catch (error: any) {\n      console.error('AuthProvider: Exception during sign out:', error.message);\n      return { error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reset password\n  const resetPassword = async (email: string) => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.resetPasswordForEmail(email);\n      return { error };\n    } catch (error: any) {\n      console.error('Error resetting password:', error.message);\n      return { error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async (updates: Partial<UserProfile>) => {\n    try {\n      setLoading(true);\n      if (!user) {\n        return { error: new Error('No user logged in') };\n      }\n\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .update(updates)\n        .eq('id', user.id)\n        .select()\n        .single();\n\n      if (error) {\n        throw error;\n      }\n\n      setProfile(data);\n      return { error: null };\n    } catch (error: any) {\n      console.error('Error updating profile:', error.message);\n      return { error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Provide the auth context value\n  const value = {\n    session,\n    user,\n    profile,\n    loading,\n    error,\n    signUp,\n    signIn,\n    signOut,\n    resetPassword,\n    updateProfile,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  \n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  \n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}