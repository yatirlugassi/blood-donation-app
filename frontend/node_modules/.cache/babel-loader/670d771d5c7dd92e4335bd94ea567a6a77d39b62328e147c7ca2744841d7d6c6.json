{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\n\n// Supabase configuration from environment variables\n// const supabaseUrl = process.env.REACT_APP_SUPABASE_URL || '';\n// const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || '';\n\n// Hardcoded values for testing - replace with your actual values from .env\nconst supabaseUrl = 'https://tbdoaiawpykipqwcgpuc.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRiZG9haWF3cHlraXBxd2NncHVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwNDk5OTksImV4cCI6MjA1NzYyNTk5OX0.dNZQCyfLFlX50wOfut7RjTEQjLx0LOG41ytRUgvADPI';\n\n// Debug info\nconsole.log('Initializing Supabase client with:');\nconsole.log('URL:', supabaseUrl);\nconsole.log('Key exists:', !!supabaseAnonKey);\n\n// Create Supabase client with enhanced session persistence\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    storageKey: 'blood-donation-auth-token' // Custom storage key for better identification\n  },\n  global: {\n    headers: {\n      'x-application-name': 'blood-donation-app' // Custom header for tracking\n    },\n    fetch: (url, options) => {\n      // Set a custom timeout for fetch requests\n      const timeout = 8000; // 8 seconds (reduced from 15)\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n      // Add the abort signal to the options\n      const fetchOptions = {\n        ...options,\n        signal: controller.signal\n      };\n      return new Promise((resolve, reject) => {\n        fetch(url, fetchOptions).then(response => {\n          clearTimeout(timeoutId);\n          resolve(response);\n        }).catch(error => {\n          clearTimeout(timeoutId);\n          if (error.name === 'AbortError') {\n            console.error('Supabase fetch request timed out after', timeout, 'ms');\n            reject(new Error(`Request timed out after ${timeout}ms`));\n          } else {\n            reject(error);\n          }\n        });\n      });\n    }\n  }\n});\n\n// Remove the automatic connection test to avoid unnecessary requests\n// (async () => { ... })();\n\n// Simple in-memory cache implementation\nconst cache = {};\nconst CACHE_DURATION = 60000; // 1 minute cache duration\n\n// Helper function to use cache\nconst withCache = async (cacheKey, fetchFunction, cacheDuration = CACHE_DURATION) => {\n  // Check if we have a valid cache entry\n  const now = Date.now();\n  const cachedItem = cache[cacheKey];\n  if (cachedItem && now - cachedItem.timestamp < cacheDuration) {\n    console.log(`Using cached data for ${cacheKey}`);\n    return {\n      data: cachedItem.data,\n      error: null\n    };\n  }\n\n  // No valid cache, fetch fresh data\n  const result = await fetchFunction();\n\n  // Cache the result if there's no error\n  if (!result.error && result.data) {\n    cache[cacheKey] = {\n      data: result.data,\n      timestamp: now\n    };\n  }\n  return result;\n};\n\n// Types for our database\n\n// Blood types functions\nexport const getBloodTypes = async () => {\n  return withCache('blood_types', async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('blood_types').select('*').order('id');\n    if (error) {\n      console.error('Supabase error in getBloodTypes:', error);\n    }\n    return {\n      data,\n      error\n    };\n  });\n};\n\n// Blood compatibility functions\nexport const getBloodCompatibility = async () => {\n  return withCache('blood_compatibility', async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('blood_compatibility').select('*');\n    if (error) {\n      console.error('Supabase error in getBloodCompatibility:', error);\n    }\n    return {\n      data,\n      error\n    };\n  });\n};\nexport const getCompatibleDonors = async bloodType => {\n  return withCache(`compatible_donors_${bloodType}`, async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('blood_compatibility').select('donor_type').eq('recipient_type', bloodType).eq('compatible', true);\n    return {\n      data: data ? data.map(item => item.donor_type) : null,\n      error\n    };\n  });\n};\nexport const getCompatibleRecipients = async bloodType => {\n  return withCache(`compatible_recipients_${bloodType}`, async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('blood_compatibility').select('recipient_type').eq('donor_type', bloodType).eq('compatible', true);\n    return {\n      data: data ? data.map(item => item.recipient_type) : null,\n      error\n    };\n  });\n};\n\n// Regional data functions\nexport const getRegionalData = async region => {\n  return withCache(`regional_data_${region || 'all'}`, async () => {\n    let query = supabase.from('regional_blood_data').select('*');\n    if (region) {\n      query = query.ilike('region', `%${region}%`);\n    }\n    const {\n      data,\n      error\n    } = await query;\n    return {\n      data,\n      error\n    };\n  });\n};\n\n// User profile functions\nexport const getUserProfile = async userId => {\n  const {\n    data,\n    error\n  } = await supabase.from('user_profiles').select('*').eq('id', userId).single();\n  return {\n    data,\n    error\n  };\n};\nexport const createUserProfile = async profile => {\n  const {\n    data,\n    error\n  } = await supabase.from('user_profiles').insert(profile).select().single();\n  return {\n    data,\n    error\n  };\n};\nexport const updateUserProfile = async (userId, updates) => {\n  const {\n    data,\n    error\n  } = await supabase.from('user_profiles').update(updates).eq('id', userId).select().single();\n  return {\n    data,\n    error\n  };\n};\n\n// Quiz functions\nexport const getQuizQuestions = async (limit = 10, category) => {\n  let query = supabase.from('quiz_questions').select('*');\n  if (category) {\n    query = query.eq('category', category);\n  }\n  const {\n    data,\n    error\n  } = await query.limit(limit);\n  return {\n    data,\n    error\n  };\n};\nexport const saveQuizResult = async result => {\n  const {\n    data,\n    error\n  } = await supabase.from('quiz_results').insert(result).select().single();\n  return {\n    data,\n    error\n  };\n};\nexport const getUserQuizResults = async userId => {\n  const {\n    data,\n    error\n  } = await supabase.from('quiz_results').select('*').eq('user_id', userId).order('completed_at', {\n    ascending: false\n  });\n  return {\n    data,\n    error\n  };\n};","map":{"version":3,"names":["createClient","supabaseUrl","supabaseAnonKey","console","log","supabase","auth","autoRefreshToken","persistSession","detectSessionInUrl","storageKey","global","headers","fetch","url","options","timeout","controller","AbortController","timeoutId","setTimeout","abort","fetchOptions","signal","Promise","resolve","reject","then","response","clearTimeout","catch","error","name","Error","cache","CACHE_DURATION","withCache","cacheKey","fetchFunction","cacheDuration","now","Date","cachedItem","timestamp","data","result","getBloodTypes","from","select","order","getBloodCompatibility","getCompatibleDonors","bloodType","eq","map","item","donor_type","getCompatibleRecipients","recipient_type","getRegionalData","region","query","ilike","getUserProfile","userId","single","createUserProfile","profile","insert","updateUserProfile","updates","update","getQuizQuestions","limit","category","saveQuizResult","getUserQuizResults","ascending"],"sources":["C:/Users/yatir/finalProjectReact/frontend/src/services/supabaseClient.ts"],"sourcesContent":["import { createClient, SupabaseClient, User } from '@supabase/supabase-js';\r\n\r\n// Supabase configuration from environment variables\r\n// const supabaseUrl = process.env.REACT_APP_SUPABASE_URL || '';\r\n// const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || '';\r\n\r\n// Hardcoded values for testing - replace with your actual values from .env\r\nconst supabaseUrl = 'https://tbdoaiawpykipqwcgpuc.supabase.co';\r\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRiZG9haWF3cHlraXBxd2NncHVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwNDk5OTksImV4cCI6MjA1NzYyNTk5OX0.dNZQCyfLFlX50wOfut7RjTEQjLx0LOG41ytRUgvADPI';\r\n\r\n// Debug info\r\nconsole.log('Initializing Supabase client with:');\r\nconsole.log('URL:', supabaseUrl);\r\nconsole.log('Key exists:', !!supabaseAnonKey);\r\n\r\n// Create Supabase client with enhanced session persistence\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\r\n  auth: {\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: true,\r\n    storageKey: 'blood-donation-auth-token', // Custom storage key for better identification\r\n  },\r\n  global: {\r\n    headers: {\r\n      'x-application-name': 'blood-donation-app', // Custom header for tracking\r\n    },\r\n    fetch: (url, options) => {\r\n      // Set a custom timeout for fetch requests\r\n      const timeout = 8000; // 8 seconds (reduced from 15)\r\n      \r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\r\n      \r\n      // Add the abort signal to the options\r\n      const fetchOptions = {\r\n        ...options,\r\n        signal: controller.signal\r\n      };\r\n      \r\n      return new Promise((resolve, reject) => {\r\n        fetch(url, fetchOptions)\r\n          .then(response => {\r\n            clearTimeout(timeoutId);\r\n            resolve(response);\r\n          })\r\n          .catch(error => {\r\n            clearTimeout(timeoutId);\r\n            if (error.name === 'AbortError') {\r\n              console.error('Supabase fetch request timed out after', timeout, 'ms');\r\n              reject(new Error(`Request timed out after ${timeout}ms`));\r\n            } else {\r\n              reject(error);\r\n            }\r\n          });\r\n      });\r\n    }\r\n  }\r\n});\r\n\r\n// Remove the automatic connection test to avoid unnecessary requests\r\n// (async () => { ... })();\r\n\r\n// Simple in-memory cache implementation\r\nconst cache: Record<string, { data: any; timestamp: number }> = {};\r\nconst CACHE_DURATION = 60000; // 1 minute cache duration\r\n\r\n// Helper function to use cache\r\nconst withCache = async <T>(\r\n  cacheKey: string,\r\n  fetchFunction: () => Promise<{ data: T | null; error: any }>,\r\n  cacheDuration = CACHE_DURATION\r\n): Promise<{ data: T | null; error: any }> => {\r\n  // Check if we have a valid cache entry\r\n  const now = Date.now();\r\n  const cachedItem = cache[cacheKey];\r\n  \r\n  if (cachedItem && (now - cachedItem.timestamp < cacheDuration)) {\r\n    console.log(`Using cached data for ${cacheKey}`);\r\n    return { data: cachedItem.data, error: null };\r\n  }\r\n  \r\n  // No valid cache, fetch fresh data\r\n  const result = await fetchFunction();\r\n  \r\n  // Cache the result if there's no error\r\n  if (!result.error && result.data) {\r\n    cache[cacheKey] = { data: result.data, timestamp: now };\r\n  }\r\n  \r\n  return result;\r\n};\r\n\r\n// Types for our database\r\nexport interface BloodType {\r\n  id: number;\r\n  type: string;\r\n  description: string;\r\n}\r\n\r\nexport interface BloodCompatibility {\r\n  id: number;\r\n  donor_type: string;\r\n  recipient_type: string;\r\n  compatible: boolean;\r\n}\r\n\r\nexport interface RegionalData {\r\n  id: number;\r\n  region: string;\r\n  population: number;\r\n  a_positive: number;\r\n  a_negative: number;\r\n  b_positive: number;\r\n  b_negative: number;\r\n  ab_positive: number;\r\n  ab_negative: number;\r\n  o_positive: number;\r\n  o_negative: number;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface UserProfile {\r\n  id: string;\r\n  blood_type: string | null;\r\n  region: string | null;\r\n  donation_count: number;\r\n  last_donation_date: string | null;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface QuizQuestion {\r\n  id: number;\r\n  question: string;\r\n  options: Record<string, string>;\r\n  correct_answer: string;\r\n  explanation: string;\r\n  category: string;\r\n  difficulty: string;\r\n}\r\n\r\nexport interface QuizResult {\r\n  id: number;\r\n  user_id: string;\r\n  score: number;\r\n  max_score: number;\r\n  completed_at: string;\r\n}\r\n\r\n// Blood types functions\r\nexport const getBloodTypes = async (): Promise<{ data: BloodType[] | null; error: any }> => {\r\n  return withCache('blood_types', async () => {\r\n    const { data, error } = await supabase\r\n      .from('blood_types')\r\n      .select('*')\r\n      .order('id');\r\n    \r\n    if (error) {\r\n      console.error('Supabase error in getBloodTypes:', error);\r\n    }\r\n    \r\n    return { data, error };\r\n  });\r\n};\r\n\r\n// Blood compatibility functions\r\nexport const getBloodCompatibility = async (): Promise<{ data: BloodCompatibility[] | null; error: any }> => {\r\n  return withCache('blood_compatibility', async () => {\r\n    const { data, error } = await supabase\r\n      .from('blood_compatibility')\r\n      .select('*');\r\n    \r\n    if (error) {\r\n      console.error('Supabase error in getBloodCompatibility:', error);\r\n    }\r\n    \r\n    return { data, error };\r\n  });\r\n};\r\n\r\nexport const getCompatibleDonors = async (bloodType: string): Promise<{ data: string[] | null; error: any }> => {\r\n  return withCache(`compatible_donors_${bloodType}`, async () => {\r\n    const { data, error } = await supabase\r\n      .from('blood_compatibility')\r\n      .select('donor_type')\r\n      .eq('recipient_type', bloodType)\r\n      .eq('compatible', true);\r\n    \r\n    return { \r\n      data: data ? data.map(item => item.donor_type) : null, \r\n      error \r\n    };\r\n  });\r\n};\r\n\r\nexport const getCompatibleRecipients = async (bloodType: string): Promise<{ data: string[] | null; error: any }> => {\r\n  return withCache(`compatible_recipients_${bloodType}`, async () => {\r\n    const { data, error } = await supabase\r\n      .from('blood_compatibility')\r\n      .select('recipient_type')\r\n      .eq('donor_type', bloodType)\r\n      .eq('compatible', true);\r\n    \r\n    return { \r\n      data: data ? data.map(item => item.recipient_type) : null, \r\n      error \r\n    };\r\n  });\r\n};\r\n\r\n// Regional data functions\r\nexport const getRegionalData = async (region?: string): Promise<{ data: RegionalData[] | null; error: any }> => {\r\n  return withCache(`regional_data_${region || 'all'}`, async () => {\r\n    let query = supabase.from('regional_blood_data').select('*');\r\n    \r\n    if (region) {\r\n      query = query.ilike('region', `%${region}%`);\r\n    }\r\n    \r\n    const { data, error } = await query;\r\n    return { data, error };\r\n  });\r\n};\r\n\r\n// User profile functions\r\nexport const getUserProfile = async (userId: string): Promise<{ data: UserProfile | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('user_profiles')\r\n    .select('*')\r\n    .eq('id', userId)\r\n    .single();\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const createUserProfile = async (profile: Partial<UserProfile>): Promise<{ data: UserProfile | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('user_profiles')\r\n    .insert(profile)\r\n    .select()\r\n    .single();\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const updateUserProfile = async (userId: string, updates: Partial<UserProfile>): Promise<{ data: UserProfile | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('user_profiles')\r\n    .update(updates)\r\n    .eq('id', userId)\r\n    .select()\r\n    .single();\r\n  \r\n  return { data, error };\r\n};\r\n\r\n// Quiz functions\r\nexport const getQuizQuestions = async (limit = 10, category?: string): Promise<{ data: QuizQuestion[] | null; error: any }> => {\r\n  let query = supabase.from('quiz_questions').select('*');\r\n  \r\n  if (category) {\r\n    query = query.eq('category', category);\r\n  }\r\n  \r\n  const { data, error } = await query.limit(limit);\r\n  return { data, error };\r\n};\r\n\r\nexport const saveQuizResult = async (result: Omit<QuizResult, 'id' | 'completed_at'>): Promise<{ data: QuizResult | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('quiz_results')\r\n    .insert(result)\r\n    .select()\r\n    .single();\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const getUserQuizResults = async (userId: string): Promise<{ data: QuizResult[] | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('quiz_results')\r\n    .select('*')\r\n    .eq('user_id', userId)\r\n    .order('completed_at', { ascending: false });\r\n  \r\n  return { data, error };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}