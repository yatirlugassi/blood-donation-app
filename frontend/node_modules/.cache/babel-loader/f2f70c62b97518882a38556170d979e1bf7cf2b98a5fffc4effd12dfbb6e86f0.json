{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Navigate}from'react-router-dom';import{useAuth}from'../../contexts/AuthContext';import{supabase}from'../../services/supabaseClient';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const AdminRoute=_ref=>{let{children}=_ref;const{user,loading}=useAuth();const[isAdmin,setIsAdmin]=useState(false);const[checkingAdmin,setCheckingAdmin]=useState(true);useEffect(()=>{const checkAdminStatus=async()=>{if(!user){setCheckingAdmin(false);return;}try{// Check if the user is an admin from the user_profiles table\nconst{data,error}=await supabase.from('user_profiles').select('is_admin').eq('id',user.id).single();if(error){console.error('Error checking admin status:',error);setIsAdmin(false);}else{setIsAdmin((data===null||data===void 0?void 0:data.is_admin)||false);}}catch(error){console.error('Error in admin check:',error);setIsAdmin(false);}finally{setCheckingAdmin(false);}};checkAdminStatus();},[user]);if(loading||checkingAdmin){return/*#__PURE__*/_jsxs(\"div\",{className:\"loading-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Verifying permissions...\"})]});}if(!user){return/*#__PURE__*/_jsx(Navigate,{to:\"/login\",replace:true});}if(!isAdmin){return/*#__PURE__*/_jsx(Navigate,{to:\"/dashboard\",replace:true});}return/*#__PURE__*/_jsx(_Fragment,{children:children});};export default AdminRoute;","map":{"version":3,"names":["React","useState","useEffect","Navigate","useAuth","supabase","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","AdminRoute","_ref","children","user","loading","isAdmin","setIsAdmin","checkingAdmin","setCheckingAdmin","checkAdminStatus","data","error","from","select","eq","id","single","console","is_admin","className","to","replace"],"sources":["C:/Users/yatir/finalProjectReact/frontend/src/components/Auth/AdminRoute.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { supabase } from '../../services/supabaseClient';\r\n\r\ninterface AdminRouteProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst AdminRoute: React.FC<AdminRouteProps> = ({ children }) => {\r\n  const { user, loading } = useAuth();\r\n  const [isAdmin, setIsAdmin] = useState<boolean>(false);\r\n  const [checkingAdmin, setCheckingAdmin] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    const checkAdminStatus = async () => {\r\n      if (!user) {\r\n        setCheckingAdmin(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // Check if the user is an admin from the user_profiles table\r\n        const { data, error } = await supabase\r\n          .from('user_profiles')\r\n          .select('is_admin')\r\n          .eq('id', user.id)\r\n          .single();\r\n\r\n        if (error) {\r\n          console.error('Error checking admin status:', error);\r\n          setIsAdmin(false);\r\n        } else {\r\n          setIsAdmin(data?.is_admin || false);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error in admin check:', error);\r\n        setIsAdmin(false);\r\n      } finally {\r\n        setCheckingAdmin(false);\r\n      }\r\n    };\r\n\r\n    checkAdminStatus();\r\n  }, [user]);\r\n\r\n  if (loading || checkingAdmin) {\r\n    return (\r\n      <div className=\"loading-container\">\r\n        <div className=\"spinner\"></div>\r\n        <p>Verifying permissions...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!user) {\r\n    return <Navigate to=\"/login\" replace />;\r\n  }\r\n\r\n  if (!isAdmin) {\r\n    return <Navigate to=\"/dashboard\" replace />;\r\n  }\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default AdminRoute; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,QAAQ,KAAQ,kBAAkB,CAC3C,OAASC,OAAO,KAAQ,4BAA4B,CACpD,OAASC,QAAQ,KAAQ,+BAA+B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAMzD,KAAM,CAAAC,UAAqC,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACzD,KAAM,CAAEE,IAAI,CAAEC,OAAQ,CAAC,CAAGZ,OAAO,CAAC,CAAC,CACnC,KAAM,CAACa,OAAO,CAAEC,UAAU,CAAC,CAAGjB,QAAQ,CAAU,KAAK,CAAC,CACtD,KAAM,CAACkB,aAAa,CAAEC,gBAAgB,CAAC,CAAGnB,QAAQ,CAAU,IAAI,CAAC,CAEjEC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAmB,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACnC,GAAI,CAACN,IAAI,CAAE,CACTK,gBAAgB,CAAC,KAAK,CAAC,CACvB,OACF,CAEA,GAAI,CACF;AACA,KAAM,CAAEE,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAlB,QAAQ,CACnCmB,IAAI,CAAC,eAAe,CAAC,CACrBC,MAAM,CAAC,UAAU,CAAC,CAClBC,EAAE,CAAC,IAAI,CAAEX,IAAI,CAACY,EAAE,CAAC,CACjBC,MAAM,CAAC,CAAC,CAEX,GAAIL,KAAK,CAAE,CACTM,OAAO,CAACN,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpDL,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,IAAM,CACLA,UAAU,CAAC,CAAAI,IAAI,SAAJA,IAAI,iBAAJA,IAAI,CAAEQ,QAAQ,GAAI,KAAK,CAAC,CACrC,CACF,CAAE,MAAOP,KAAK,CAAE,CACdM,OAAO,CAACN,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7CL,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,OAAS,CACRE,gBAAgB,CAAC,KAAK,CAAC,CACzB,CACF,CAAC,CAEDC,gBAAgB,CAAC,CAAC,CACpB,CAAC,CAAE,CAACN,IAAI,CAAC,CAAC,CAEV,GAAIC,OAAO,EAAIG,aAAa,CAAE,CAC5B,mBACEV,KAAA,QAAKsB,SAAS,CAAC,mBAAmB,CAAAjB,QAAA,eAChCP,IAAA,QAAKwB,SAAS,CAAC,SAAS,CAAM,CAAC,cAC/BxB,IAAA,MAAAO,QAAA,CAAG,0BAAwB,CAAG,CAAC,EAC5B,CAAC,CAEV,CAEA,GAAI,CAACC,IAAI,CAAE,CACT,mBAAOR,IAAA,CAACJ,QAAQ,EAAC6B,EAAE,CAAC,QAAQ,CAACC,OAAO,MAAE,CAAC,CACzC,CAEA,GAAI,CAAChB,OAAO,CAAE,CACZ,mBAAOV,IAAA,CAACJ,QAAQ,EAAC6B,EAAE,CAAC,YAAY,CAACC,OAAO,MAAE,CAAC,CAC7C,CAEA,mBAAO1B,IAAA,CAAAI,SAAA,EAAAG,QAAA,CAAGA,QAAQ,CAAG,CAAC,CACxB,CAAC,CAED,cAAe,CAAAF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}