{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yatir\\\\finalProjectReact\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport { supabase, getUserProfile, createUserProfile } from '../services/supabaseClient';\n\n// Define the shape of our auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context with a default undefined value\nconst AuthContext = /*#__PURE__*/createContext(undefined);\n\n// Props for the AuthProvider component\n\n// AuthProvider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [session, setSession] = useState(null);\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Add a ref to track the last refresh time\n  const lastRefreshTime = useRef(0);\n  // Add a ref to track if a refresh is in progress\n  const isRefreshing = useRef(false);\n\n  // Function to fetch user profile with caching\n  const fetchUserProfile = useCallback(async userId => {\n    try {\n      // Only log in development\n      if (process.env.NODE_ENV === 'development') {\n        console.log('AuthProvider: Fetching user profile for:', userId);\n      }\n      const {\n        data: profileData,\n        error: profileError\n      } = await getUserProfile(userId);\n      if (profileError || !profileData) {\n        console.log('AuthProvider: Profile not found or error, creating new profile...');\n        // Create new profile if it doesn't exist or there was an error\n        const {\n          data: newProfile,\n          error: createError\n        } = await createUserProfile({\n          id: userId,\n          blood_type: null,\n          region: null,\n          donation_count: 0,\n          last_donation_date: null\n        });\n        if (createError) {\n          console.error('AuthProvider: Error creating user profile:', createError);\n        } else {\n          console.log('AuthProvider: New profile created successfully');\n          setProfile(newProfile);\n        }\n      } else {\n        setProfile(profileData);\n      }\n    } catch (err) {\n      console.error('Error fetching user profile:', err);\n    }\n  }, []);\n\n  // Function to refresh the session with debouncing\n  const refreshSession = useCallback(async () => {\n    // Prevent multiple refreshes within a short time period (1 second)\n    const now = Date.now();\n    if (now - lastRefreshTime.current < 1000 || isRefreshing.current) {\n      return;\n    }\n    try {\n      var _data$session, _data$session2, _data$session3;\n      isRefreshing.current = true;\n      lastRefreshTime.current = now;\n\n      // Only log in development\n      if (process.env.NODE_ENV === 'development') {\n        console.log('AuthProvider: Refreshing session...');\n      }\n      setLoading(true);\n\n      // Get the current session\n      const {\n        data,\n        error\n      } = await supabase.auth.getSession();\n      if (error) {\n        console.error('AuthProvider: Error refreshing session:', error);\n        throw error;\n      }\n      if (process.env.NODE_ENV === 'development') {\n        console.log('AuthProvider: Session refresh result:', data !== null && data !== void 0 && data.session ? 'Session exists' : 'No session');\n      }\n      setSession(data.session);\n      setUser(((_data$session = data.session) === null || _data$session === void 0 ? void 0 : _data$session.user) || null);\n\n      // Fetch user profile if user exists and profile doesn't match\n      if ((_data$session2 = data.session) !== null && _data$session2 !== void 0 && _data$session2.user && (!profile || profile.id !== data.session.user.id)) {\n        await fetchUserProfile(data.session.user.id);\n      } else if (!((_data$session3 = data.session) !== null && _data$session3 !== void 0 && _data$session3.user)) {\n        setProfile(null);\n      }\n    } catch (err) {\n      console.error('Error refreshing session:', err);\n    } finally {\n      setLoading(false);\n      isRefreshing.current = false;\n    }\n  }, [fetchUserProfile, profile]);\n\n  // Initialize the auth state\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log('AuthProvider: Initializing auth state...');\n    }\n\n    // Set up a listener for auth state changes\n    const {\n      data: authListener\n    } = supabase.auth.onAuthStateChange(async (event, newSession) => {\n      if (process.env.NODE_ENV === 'development') {\n        console.log('AuthProvider: Auth state changed:', event);\n      }\n      setSession(newSession);\n      setUser((newSession === null || newSession === void 0 ? void 0 : newSession.user) || null);\n      if (event === 'SIGNED_IN' && newSession !== null && newSession !== void 0 && newSession.user) {\n        console.log('AuthProvider: User signed in, fetching profile...');\n        await fetchUserProfile(newSession.user.id);\n      } else if (event === 'SIGNED_OUT') {\n        console.log('AuthProvider: User signed out');\n        setProfile(null);\n      } else if (event === 'TOKEN_REFRESHED' && newSession !== null && newSession !== void 0 && newSession.user) {\n        if (process.env.NODE_ENV === 'development') {\n          console.log('AuthProvider: Token refreshed, updating session');\n        }\n        // No need to fetch profile again as it should already be in state\n      }\n    });\n\n    // Initial session check\n    refreshSession();\n\n    // Set up visibility change listener to refresh session when tab becomes visible again\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible') {\n        if (process.env.NODE_ENV === 'development') {\n          console.log('AuthProvider: Tab became visible, refreshing session');\n        }\n        refreshSession();\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    // Clean up subscriptions on unmount\n    return () => {\n      if (process.env.NODE_ENV === 'development') {\n        console.log('AuthProvider: Cleaning up auth listener and visibility listener');\n      }\n      authListener === null || authListener === void 0 ? void 0 : authListener.subscription.unsubscribe();\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [refreshSession, fetchUserProfile]);\n\n  // Sign up with email and password\n  const signUp = async (email, password) => {\n    try {\n      console.log('AuthProvider: Signing up user:', email);\n      setLoading(true);\n      const {\n        data,\n        error\n      } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          // This will skip email verification\n          data: {\n            email_confirmed: true\n          }\n        }\n      });\n      if (error) {\n        console.error('AuthProvider: Sign up error:', error);\n      } else {\n        var _data$user;\n        console.log('AuthProvider: Sign up successful, user created:', data === null || data === void 0 ? void 0 : (_data$user = data.user) === null || _data$user === void 0 ? void 0 : _data$user.id);\n\n        // Auto sign in after signup\n        console.log('AuthProvider: Auto signing in after signup...');\n        await supabase.auth.signInWithPassword({\n          email,\n          password\n        });\n      }\n      return {\n        error\n      };\n    } catch (error) {\n      console.error('AuthProvider: Exception during sign up:', error.message);\n      return {\n        error\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Sign in with email and password\n  const signIn = async (email, password) => {\n    try {\n      console.log('AuthProvider: Signing in user:', email);\n      setLoading(true);\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) {\n        console.error('AuthProvider: Sign in error:', error);\n      } else {\n        var _data$user2;\n        console.log('AuthProvider: Sign in successful, user:', data === null || data === void 0 ? void 0 : (_data$user2 = data.user) === null || _data$user2 === void 0 ? void 0 : _data$user2.id);\n\n        // Explicitly set the session and user\n        setSession(data.session);\n        setUser(data.user);\n\n        // Fetch user profile\n        if (data.user) {\n          await fetchUserProfile(data.user.id);\n        }\n      }\n      return {\n        error\n      };\n    } catch (error) {\n      console.error('AuthProvider: Exception during sign in:', error.message);\n      return {\n        error\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Sign out\n  const signOut = async () => {\n    try {\n      console.log('AuthProvider: Signing out user...');\n      setLoading(true);\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) {\n        console.error('AuthProvider: Error signing out:', error);\n        throw error;\n      }\n      console.log('AuthProvider: Sign out successful, clearing user state');\n      // Clear all auth state\n      setUser(null);\n      setSession(null);\n      setProfile(null);\n      return {\n        error: null\n      };\n    } catch (error) {\n      console.error('AuthProvider: Exception during sign out:', error.message);\n      return {\n        error\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reset password\n  const resetPassword = async email => {\n    try {\n      setLoading(true);\n      const {\n        error\n      } = await supabase.auth.resetPasswordForEmail(email);\n      return {\n        error\n      };\n    } catch (error) {\n      console.error('Error resetting password:', error.message);\n      return {\n        error\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async updates => {\n    try {\n      setLoading(true);\n      if (!user) {\n        return {\n          error: new Error('No user logged in')\n        };\n      }\n      const {\n        data,\n        error\n      } = await supabase.from('user_profiles').update(updates).eq('id', user.id).select().single();\n      if (error) {\n        throw error;\n      }\n      setProfile(data);\n      return {\n        error: null\n      };\n    } catch (error) {\n      console.error('Error updating profile:', error.message);\n      return {\n        error\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Provide the auth context value\n  const value = {\n    session,\n    user,\n    profile,\n    loading,\n    error,\n    signUp,\n    signIn,\n    signOut,\n    resetPassword,\n    updateProfile,\n    refreshSession\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook to use the auth context\n_s(AuthProvider, \"3SpsJKzqlvpYanf89AQjU7IZLow=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useRef","supabase","getUserProfile","createUserProfile","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","session","setSession","user","setUser","profile","setProfile","loading","setLoading","error","setError","lastRefreshTime","isRefreshing","fetchUserProfile","userId","process","env","NODE_ENV","console","log","data","profileData","profileError","newProfile","createError","id","blood_type","region","donation_count","last_donation_date","err","refreshSession","now","Date","current","_data$session","_data$session2","_data$session3","auth","getSession","authListener","onAuthStateChange","event","newSession","handleVisibilityChange","document","visibilityState","addEventListener","subscription","unsubscribe","removeEventListener","signUp","email","password","options","email_confirmed","_data$user","signInWithPassword","message","signIn","_data$user2","signOut","resetPassword","resetPasswordForEmail","updateProfile","updates","Error","from","update","eq","select","single","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/yatir/finalProjectReact/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback, useRef } from 'react';\nimport { Session, User } from '@supabase/supabase-js';\nimport { supabase, UserProfile, getUserProfile, createUserProfile } from '../services/supabaseClient';\n\n// Define the shape of our auth context\ninterface AuthContextType {\n  session: Session | null;\n  user: User | null;\n  profile: UserProfile | null;\n  loading: boolean;\n  error: string | null;\n  signUp: (email: string, password: string) => Promise<{ error: any }>;\n  signIn: (email: string, password: string) => Promise<{ error: any }>;\n  signOut: () => Promise<{ error: any | null }>;\n  resetPassword: (email: string) => Promise<{ error: any }>;\n  updateProfile: (updates: Partial<UserProfile>) => Promise<{ error: any }>;\n  refreshSession: () => Promise<void>;\n}\n\n// Create the context with a default undefined value\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Props for the AuthProvider component\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\n// AuthProvider component\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [session, setSession] = useState<Session | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Add a ref to track the last refresh time\n  const lastRefreshTime = useRef<number>(0);\n  // Add a ref to track if a refresh is in progress\n  const isRefreshing = useRef<boolean>(false);\n\n  // Function to fetch user profile with caching\n  const fetchUserProfile = useCallback(async (userId: string) => {\n    try {\n      // Only log in development\n      if (process.env.NODE_ENV === 'development') {\n        console.log('AuthProvider: Fetching user profile for:', userId);\n      }\n      \n      const { data: profileData, error: profileError } = await getUserProfile(userId);\n      \n      if (profileError || !profileData) {\n        console.log('AuthProvider: Profile not found or error, creating new profile...');\n        // Create new profile if it doesn't exist or there was an error\n        const { data: newProfile, error: createError } = await createUserProfile({\n          id: userId,\n          blood_type: null,\n          region: null,\n          donation_count: 0,\n          last_donation_date: null,\n        });\n        \n        if (createError) {\n          console.error('AuthProvider: Error creating user profile:', createError);\n        } else {\n          console.log('AuthProvider: New profile created successfully');\n          setProfile(newProfile);\n        }\n      } else {\n        setProfile(profileData);\n      }\n    } catch (err) {\n      console.error('Error fetching user profile:', err);\n    }\n  }, []);\n\n  // Function to refresh the session with debouncing\n  const refreshSession = useCallback(async () => {\n    // Prevent multiple refreshes within a short time period (1 second)\n    const now = Date.now();\n    if (now - lastRefreshTime.current < 1000 || isRefreshing.current) {\n      return;\n    }\n    \n    try {\n      isRefreshing.current = true;\n      lastRefreshTime.current = now;\n      \n      // Only log in development\n      if (process.env.NODE_ENV === 'development') {\n        console.log('AuthProvider: Refreshing session...');\n      }\n      \n      setLoading(true);\n      \n      // Get the current session\n      const { data, error } = await supabase.auth.getSession();\n      \n      if (error) {\n        console.error('AuthProvider: Error refreshing session:', error);\n        throw error;\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        console.log('AuthProvider: Session refresh result:', data?.session ? 'Session exists' : 'No session');\n      }\n      \n      setSession(data.session);\n      setUser(data.session?.user || null);\n\n      // Fetch user profile if user exists and profile doesn't match\n      if (data.session?.user && (!profile || profile.id !== data.session.user.id)) {\n        await fetchUserProfile(data.session.user.id);\n      } else if (!data.session?.user) {\n        setProfile(null);\n      }\n    } catch (err) {\n      console.error('Error refreshing session:', err);\n    } finally {\n      setLoading(false);\n      isRefreshing.current = false;\n    }\n  }, [fetchUserProfile, profile]);\n\n  // Initialize the auth state\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log('AuthProvider: Initializing auth state...');\n    }\n    \n    // Set up a listener for auth state changes\n    const { data: authListener } = supabase.auth.onAuthStateChange(async (event, newSession) => {\n      if (process.env.NODE_ENV === 'development') {\n        console.log('AuthProvider: Auth state changed:', event);\n      }\n      \n      setSession(newSession);\n      setUser(newSession?.user || null);\n      \n      if (event === 'SIGNED_IN' && newSession?.user) {\n        console.log('AuthProvider: User signed in, fetching profile...');\n        await fetchUserProfile(newSession.user.id);\n      } else if (event === 'SIGNED_OUT') {\n        console.log('AuthProvider: User signed out');\n        setProfile(null);\n      } else if (event === 'TOKEN_REFRESHED' && newSession?.user) {\n        if (process.env.NODE_ENV === 'development') {\n          console.log('AuthProvider: Token refreshed, updating session');\n        }\n        // No need to fetch profile again as it should already be in state\n      }\n    });\n\n    // Initial session check\n    refreshSession();\n\n    // Set up visibility change listener to refresh session when tab becomes visible again\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible') {\n        if (process.env.NODE_ENV === 'development') {\n          console.log('AuthProvider: Tab became visible, refreshing session');\n        }\n        refreshSession();\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    // Clean up subscriptions on unmount\n    return () => {\n      if (process.env.NODE_ENV === 'development') {\n        console.log('AuthProvider: Cleaning up auth listener and visibility listener');\n      }\n      authListener?.subscription.unsubscribe();\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [refreshSession, fetchUserProfile]);\n\n  // Sign up with email and password\n  const signUp = async (email: string, password: string) => {\n    try {\n      console.log('AuthProvider: Signing up user:', email);\n      setLoading(true);\n      \n      const { data, error } = await supabase.auth.signUp({ \n        email, \n        password,\n        options: {\n          // This will skip email verification\n          data: {\n            email_confirmed: true\n          }\n        }\n      });\n      \n      if (error) {\n        console.error('AuthProvider: Sign up error:', error);\n      } else {\n        console.log('AuthProvider: Sign up successful, user created:', data?.user?.id);\n        \n        // Auto sign in after signup\n        console.log('AuthProvider: Auto signing in after signup...');\n        await supabase.auth.signInWithPassword({ email, password });\n      }\n      \n      return { error };\n    } catch (error: any) {\n      console.error('AuthProvider: Exception during sign up:', error.message);\n      return { error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Sign in with email and password\n  const signIn = async (email: string, password: string) => {\n    try {\n      console.log('AuthProvider: Signing in user:', email);\n      setLoading(true);\n      \n      const { data, error } = await supabase.auth.signInWithPassword({ email, password });\n      \n      if (error) {\n        console.error('AuthProvider: Sign in error:', error);\n      } else {\n        console.log('AuthProvider: Sign in successful, user:', data?.user?.id);\n        \n        // Explicitly set the session and user\n        setSession(data.session);\n        setUser(data.user);\n        \n        // Fetch user profile\n        if (data.user) {\n          await fetchUserProfile(data.user.id);\n        }\n      }\n      \n      return { error };\n    } catch (error: any) {\n      console.error('AuthProvider: Exception during sign in:', error.message);\n      return { error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Sign out\n  const signOut = async () => {\n    try {\n      console.log('AuthProvider: Signing out user...');\n      setLoading(true);\n      \n      const { error } = await supabase.auth.signOut();\n      \n      if (error) {\n        console.error('AuthProvider: Error signing out:', error);\n        throw error;\n      }\n      \n      console.log('AuthProvider: Sign out successful, clearing user state');\n      // Clear all auth state\n      setUser(null);\n      setSession(null);\n      setProfile(null);\n      \n      return { error: null };\n    } catch (error: any) {\n      console.error('AuthProvider: Exception during sign out:', error.message);\n      return { error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reset password\n  const resetPassword = async (email: string) => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.resetPasswordForEmail(email);\n      return { error };\n    } catch (error: any) {\n      console.error('Error resetting password:', error.message);\n      return { error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async (updates: Partial<UserProfile>) => {\n    try {\n      setLoading(true);\n      if (!user) {\n        return { error: new Error('No user logged in') };\n      }\n\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .update(updates)\n        .eq('id', user.id)\n        .select()\n        .single();\n\n      if (error) {\n        throw error;\n      }\n\n      setProfile(data);\n      return { error: null };\n    } catch (error: any) {\n      console.error('Error updating profile:', error.message);\n      return { error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Provide the auth context value\n  const value = {\n    session,\n    user,\n    profile,\n    loading,\n    error,\n    signUp,\n    signIn,\n    signOut,\n    resetPassword,\n    updateProfile,\n    refreshSession,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  \n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  \n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}