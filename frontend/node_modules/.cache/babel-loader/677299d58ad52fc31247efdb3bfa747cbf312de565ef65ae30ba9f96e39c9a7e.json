{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\n\n// Supabase configuration from environment variables\n// const supabaseUrl = process.env.REACT_APP_SUPABASE_URL || '';\n// const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || '';\n\n// Hardcoded values for testing - replace with your actual values from .env\nconst supabaseUrl = 'https://tbdoaiawpykipqwcgpuc.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRiZG9haWF3cHlraXBxd2NncHVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwNDk5OTksImV4cCI6MjA1NzYyNTk5OX0.dNZQCyfLFlX50wOfut7RjTEQjLx0LOG41ytRUgvADPI';\n\n// Debug info\nconsole.log('Initializing Supabase client with:');\nconsole.log('URL:', supabaseUrl);\nconsole.log('Key exists:', !!supabaseAnonKey);\n\n// Create Supabase client with debug options\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true\n  }\n});\n\n// Test connection immediately\n(async () => {\n  try {\n    console.log('Testing Supabase connection...');\n    const {\n      data,\n      error\n    } = await supabase.from('blood_types').select('count');\n    if (error) {\n      console.error('Supabase connection test failed:', error);\n    } else {\n      console.log('Supabase connection successful!', data);\n    }\n  } catch (err) {\n    console.error('Supabase connection test exception:', err);\n  }\n})();\n\n// Types for our database\n\n// Blood types functions\nexport const getBloodTypes = async () => {\n  console.log('Calling getBloodTypes from Supabase');\n  const {\n    data,\n    error\n  } = await supabase.from('blood_types').select('*').order('id');\n  if (error) {\n    console.error('Supabase error in getBloodTypes:', error);\n  } else {\n    console.log(`Retrieved ${(data === null || data === void 0 ? void 0 : data.length) || 0} blood types`);\n  }\n  return {\n    data,\n    error\n  };\n};\n\n// Blood compatibility functions\nexport const getBloodCompatibility = async () => {\n  console.log('Calling getBloodCompatibility from Supabase');\n  const {\n    data,\n    error\n  } = await supabase.from('blood_compatibility').select('*');\n  if (error) {\n    console.error('Supabase error in getBloodCompatibility:', error);\n  } else {\n    console.log(`Retrieved ${(data === null || data === void 0 ? void 0 : data.length) || 0} compatibility records`);\n  }\n  return {\n    data,\n    error\n  };\n};\nexport const getCompatibleDonors = async bloodType => {\n  const {\n    data,\n    error\n  } = await supabase.from('blood_compatibility').select('donor_type').eq('recipient_type', bloodType).eq('compatible', true);\n  return {\n    data: data ? data.map(item => item.donor_type) : null,\n    error\n  };\n};\nexport const getCompatibleRecipients = async bloodType => {\n  const {\n    data,\n    error\n  } = await supabase.from('blood_compatibility').select('recipient_type').eq('donor_type', bloodType).eq('compatible', true);\n  return {\n    data: data ? data.map(item => item.recipient_type) : null,\n    error\n  };\n};\n\n// Regional data functions\nexport const getRegionalData = async region => {\n  let query = supabase.from('regional_blood_data').select('*');\n  if (region) {\n    query = query.ilike('region', `%${region}%`);\n  }\n  const {\n    data,\n    error\n  } = await query;\n  return {\n    data,\n    error\n  };\n};\n\n// User profile functions\nexport const getUserProfile = async userId => {\n  const {\n    data,\n    error\n  } = await supabase.from('user_profiles').select('*').eq('id', userId).single();\n  return {\n    data,\n    error\n  };\n};\nexport const createUserProfile = async profile => {\n  const {\n    data,\n    error\n  } = await supabase.from('user_profiles').insert(profile).select().single();\n  return {\n    data,\n    error\n  };\n};\nexport const updateUserProfile = async (userId, updates) => {\n  const {\n    data,\n    error\n  } = await supabase.from('user_profiles').update(updates).eq('id', userId).select().single();\n  return {\n    data,\n    error\n  };\n};\n\n// Quiz functions\nexport const getQuizQuestions = async (limit = 10, category) => {\n  let query = supabase.from('quiz_questions').select('*');\n  if (category) {\n    query = query.eq('category', category);\n  }\n  const {\n    data,\n    error\n  } = await query.limit(limit);\n  return {\n    data,\n    error\n  };\n};\nexport const saveQuizResult = async result => {\n  const {\n    data,\n    error\n  } = await supabase.from('quiz_results').insert(result).select().single();\n  return {\n    data,\n    error\n  };\n};\nexport const getUserQuizResults = async userId => {\n  const {\n    data,\n    error\n  } = await supabase.from('quiz_results').select('*').eq('user_id', userId).order('completed_at', {\n    ascending: false\n  });\n  return {\n    data,\n    error\n  };\n};","map":{"version":3,"names":["createClient","supabaseUrl","supabaseAnonKey","console","log","supabase","auth","autoRefreshToken","persistSession","detectSessionInUrl","data","error","from","select","err","getBloodTypes","order","length","getBloodCompatibility","getCompatibleDonors","bloodType","eq","map","item","donor_type","getCompatibleRecipients","recipient_type","getRegionalData","region","query","ilike","getUserProfile","userId","single","createUserProfile","profile","insert","updateUserProfile","updates","update","getQuizQuestions","limit","category","saveQuizResult","result","getUserQuizResults","ascending"],"sources":["C:/Users/yatir/finalProjectReact/frontend/src/services/supabaseClient.ts"],"sourcesContent":["import { createClient, SupabaseClient, User } from '@supabase/supabase-js';\r\n\r\n// Supabase configuration from environment variables\r\n// const supabaseUrl = process.env.REACT_APP_SUPABASE_URL || '';\r\n// const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || '';\r\n\r\n// Hardcoded values for testing - replace with your actual values from .env\r\nconst supabaseUrl = 'https://tbdoaiawpykipqwcgpuc.supabase.co';\r\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRiZG9haWF3cHlraXBxd2NncHVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwNDk5OTksImV4cCI6MjA1NzYyNTk5OX0.dNZQCyfLFlX50wOfut7RjTEQjLx0LOG41ytRUgvADPI';\r\n\r\n// Debug info\r\nconsole.log('Initializing Supabase client with:');\r\nconsole.log('URL:', supabaseUrl);\r\nconsole.log('Key exists:', !!supabaseAnonKey);\r\n\r\n// Create Supabase client with debug options\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\r\n  auth: {\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: true\r\n  }\r\n});\r\n\r\n// Test connection immediately\r\n(async () => {\r\n  try {\r\n    console.log('Testing Supabase connection...');\r\n    const { data, error } = await supabase.from('blood_types').select('count');\r\n    \r\n    if (error) {\r\n      console.error('Supabase connection test failed:', error);\r\n    } else {\r\n      console.log('Supabase connection successful!', data);\r\n    }\r\n  } catch (err) {\r\n    console.error('Supabase connection test exception:', err);\r\n  }\r\n})();\r\n\r\n// Types for our database\r\nexport interface BloodType {\r\n  id: number;\r\n  type: string;\r\n  description: string;\r\n}\r\n\r\nexport interface BloodCompatibility {\r\n  id: number;\r\n  donor_type: string;\r\n  recipient_type: string;\r\n  compatible: boolean;\r\n}\r\n\r\nexport interface RegionalData {\r\n  id: number;\r\n  region: string;\r\n  population: number;\r\n  a_positive: number;\r\n  a_negative: number;\r\n  b_positive: number;\r\n  b_negative: number;\r\n  ab_positive: number;\r\n  ab_negative: number;\r\n  o_positive: number;\r\n  o_negative: number;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface UserProfile {\r\n  id: string;\r\n  blood_type: string | null;\r\n  region: string | null;\r\n  donation_count: number;\r\n  last_donation_date: string | null;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface QuizQuestion {\r\n  id: number;\r\n  question: string;\r\n  options: Record<string, string>;\r\n  correct_answer: string;\r\n  explanation: string;\r\n  category: string;\r\n  difficulty: string;\r\n}\r\n\r\nexport interface QuizResult {\r\n  id: number;\r\n  user_id: string;\r\n  score: number;\r\n  max_score: number;\r\n  completed_at: string;\r\n}\r\n\r\n// Blood types functions\r\nexport const getBloodTypes = async (): Promise<{ data: BloodType[] | null; error: any }> => {\r\n  console.log('Calling getBloodTypes from Supabase');\r\n  const { data, error } = await supabase\r\n    .from('blood_types')\r\n    .select('*')\r\n    .order('id');\r\n  \r\n  if (error) {\r\n    console.error('Supabase error in getBloodTypes:', error);\r\n  } else {\r\n    console.log(`Retrieved ${data?.length || 0} blood types`);\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\n// Blood compatibility functions\r\nexport const getBloodCompatibility = async (): Promise<{ data: BloodCompatibility[] | null; error: any }> => {\r\n  console.log('Calling getBloodCompatibility from Supabase');\r\n  const { data, error } = await supabase\r\n    .from('blood_compatibility')\r\n    .select('*');\r\n  \r\n  if (error) {\r\n    console.error('Supabase error in getBloodCompatibility:', error);\r\n  } else {\r\n    console.log(`Retrieved ${data?.length || 0} compatibility records`);\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const getCompatibleDonors = async (bloodType: string): Promise<{ data: string[] | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('blood_compatibility')\r\n    .select('donor_type')\r\n    .eq('recipient_type', bloodType)\r\n    .eq('compatible', true);\r\n  \r\n  return { \r\n    data: data ? data.map(item => item.donor_type) : null, \r\n    error \r\n  };\r\n};\r\n\r\nexport const getCompatibleRecipients = async (bloodType: string): Promise<{ data: string[] | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('blood_compatibility')\r\n    .select('recipient_type')\r\n    .eq('donor_type', bloodType)\r\n    .eq('compatible', true);\r\n  \r\n  return { \r\n    data: data ? data.map(item => item.recipient_type) : null, \r\n    error \r\n  };\r\n};\r\n\r\n// Regional data functions\r\nexport const getRegionalData = async (region?: string): Promise<{ data: RegionalData[] | null; error: any }> => {\r\n  let query = supabase.from('regional_blood_data').select('*');\r\n  \r\n  if (region) {\r\n    query = query.ilike('region', `%${region}%`);\r\n  }\r\n  \r\n  const { data, error } = await query;\r\n  return { data, error };\r\n};\r\n\r\n// User profile functions\r\nexport const getUserProfile = async (userId: string): Promise<{ data: UserProfile | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('user_profiles')\r\n    .select('*')\r\n    .eq('id', userId)\r\n    .single();\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const createUserProfile = async (profile: Partial<UserProfile>): Promise<{ data: UserProfile | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('user_profiles')\r\n    .insert(profile)\r\n    .select()\r\n    .single();\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const updateUserProfile = async (userId: string, updates: Partial<UserProfile>): Promise<{ data: UserProfile | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('user_profiles')\r\n    .update(updates)\r\n    .eq('id', userId)\r\n    .select()\r\n    .single();\r\n  \r\n  return { data, error };\r\n};\r\n\r\n// Quiz functions\r\nexport const getQuizQuestions = async (limit = 10, category?: string): Promise<{ data: QuizQuestion[] | null; error: any }> => {\r\n  let query = supabase.from('quiz_questions').select('*');\r\n  \r\n  if (category) {\r\n    query = query.eq('category', category);\r\n  }\r\n  \r\n  const { data, error } = await query.limit(limit);\r\n  return { data, error };\r\n};\r\n\r\nexport const saveQuizResult = async (result: Omit<QuizResult, 'id' | 'completed_at'>): Promise<{ data: QuizResult | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('quiz_results')\r\n    .insert(result)\r\n    .select()\r\n    .single();\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const getUserQuizResults = async (userId: string): Promise<{ data: QuizResult[] | null; error: any }> => {\r\n  const { data, error } = await supabase\r\n    .from('quiz_results')\r\n    .select('*')\r\n    .eq('user_id', userId)\r\n    .order('completed_at', { ascending: false });\r\n  \r\n  return { data, error };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}