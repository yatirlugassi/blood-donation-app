{"ast":null,"code":"import{supabase}from'./supabaseClient';// Types for the dashboard\n// Donation functions\nexport const getUserDonations=async userId=>{console.log('Fetching donations for user:',userId);const{data,error}=await supabase.from('donations').select('*').eq('user_id',userId).order('donation_date',{ascending:false});if(error){console.error('Error fetching user donations:',error);}else{console.log(`Retrieved ${(data===null||data===void 0?void 0:data.length)||0} donations`);}return{data,error};};export const addDonation=async donation=>{console.log('Adding new donation:',donation);const{data,error}=await supabase.from('donations').insert(donation).select().single();if(error){console.error('Error adding donation:',error);}else{console.log('Donation added successfully');}return{data,error};};export const updateDonation=async(id,updates)=>{console.log(`Updating donation ${id}:`,updates);const{data,error}=await supabase.from('donations').update(updates).eq('id',id).select().single();if(error){console.error('Error updating donation:',error);}else{console.log('Donation updated successfully');}return{data,error};};export const deleteDonation=async id=>{console.log(`Deleting donation ${id}`);const{error}=await supabase.from('donations').delete().eq('id',id);if(error){console.error('Error deleting donation:',error);}else{console.log('Donation deleted successfully');}return{error};};// Donation Goals functions\nexport const getUserDonationGoals=async userId=>{console.log('Fetching donation goals for user:',userId);const{data,error}=await supabase.from('donation_goals').select('*').eq('user_id',userId).order('target_date',{ascending:true});if(error){console.error('Error fetching user donation goals:',error);}else{console.log(`Retrieved ${(data===null||data===void 0?void 0:data.length)||0} donation goals`);}return{data,error};};export const addDonationGoal=async goal=>{console.log('Adding new donation goal:',goal);const{data,error}=await supabase.from('donation_goals').insert(goal).select().single();if(error){console.error('Error adding donation goal:',error);}else{console.log('Donation goal added successfully');}return{data,error};};export const updateDonationGoal=async(id,updates)=>{console.log(`Updating donation goal ${id}:`,updates);const{data,error}=await supabase.from('donation_goals').update({...updates,updated_at:new Date().toISOString()}).eq('id',id).select().single();if(error){console.error('Error updating donation goal:',error);}else{console.log('Donation goal updated successfully');}return{data,error};};// Achievements functions\nexport const getAllAchievements=async()=>{console.log('Fetching all achievements');const{data,error}=await supabase.from('achievements').select('*').order('id');if(error){console.error('Error fetching achievements:',error);}else{console.log(`Retrieved ${(data===null||data===void 0?void 0:data.length)||0} achievements`);}return{data,error};};export const getUserAchievements=async userId=>{console.log('Fetching achievements for user:',userId);const{data,error}=await supabase.from('user_achievements').select(`\n      *,\n      achievement:achievements(*)\n    `).eq('user_id',userId).order('earned_at',{ascending:false});if(error){console.error('Error fetching user achievements:',error);}else{console.log(`Retrieved ${(data===null||data===void 0?void 0:data.length)||0} user achievements`);}return{data,error};};export const addUserAchievement=async(userId,achievementId)=>{console.log(`Adding achievement ${achievementId} to user ${userId}`);const{data,error}=await supabase.from('user_achievements').insert({user_id:userId,achievement_id:achievementId}).select().single();if(error){console.error('Error adding user achievement:',error);}else{console.log('User achievement added successfully');}return{data,error};};// Reminders functions\nexport const getUserReminders=async userId=>{console.log('Fetching reminders for user:',userId);const{data,error}=await supabase.from('donation_reminders').select('*').eq('user_id',userId).order('reminder_date',{ascending:true});if(error){console.error('Error fetching user reminders:',error);}else{console.log(`Retrieved ${(data===null||data===void 0?void 0:data.length)||0} reminders`);}return{data,error};};export const addReminder=async reminder=>{console.log('Adding new reminder:',reminder);const{data,error}=await supabase.from('donation_reminders').insert(reminder).select().single();if(error){console.error('Error adding reminder:',error);}else{console.log('Reminder added successfully');}return{data,error};};export const markReminderAsRead=async id=>{console.log(`Marking reminder ${id} as read`);const{data,error}=await supabase.from('donation_reminders').update({is_read:true}).eq('id',id).select().single();if(error){console.error('Error marking reminder as read:',error);}else{console.log('Reminder marked as read successfully');}return{data,error};};// Utility functions for dashboard\nexport const calculateNextDonationDate=lastDonationDate=>{// Typically, donors can donate whole blood every 56 days (8 weeks)\nconst lastDonation=new Date(lastDonationDate);const nextDonation=new Date(lastDonation);nextDonation.setDate(lastDonation.getDate()+56);return nextDonation;};export const checkEligibleAchievements=async(userId,donationCount)=>{console.log(`Checking eligible achievements for user ${userId} with ${donationCount} donations`);// Get all achievements\nconst{data:allAchievements}=await getAllAchievements();if(!allAchievements)return[];// Get user's existing achievements\nconst{data:userAchievements}=await getUserAchievements(userId);const existingAchievementIds=(userAchievements===null||userAchievements===void 0?void 0:userAchievements.map(ua=>ua.achievement_id))||[];// Filter achievements user is eligible for but doesn't have yet\nconst eligibleAchievements=allAchievements.filter(achievement=>{// Skip if user already has this achievement\nif(existingAchievementIds.includes(achievement.id))return false;// Check donation count based achievements\nif(achievement.criteria.includes('Complete ')){const requiredCount=parseInt(achievement.criteria.split('Complete ')[1].split(' ')[0]);return donationCount>=requiredCount;}return false;});console.log(`Found ${eligibleAchievements.length} eligible achievements`);return eligibleAchievements;};","map":{"version":3,"names":["supabase","getUserDonations","userId","console","log","data","error","from","select","eq","order","ascending","length","addDonation","donation","insert","single","updateDonation","id","updates","update","deleteDonation","delete","getUserDonationGoals","addDonationGoal","goal","updateDonationGoal","updated_at","Date","toISOString","getAllAchievements","getUserAchievements","addUserAchievement","achievementId","user_id","achievement_id","getUserReminders","addReminder","reminder","markReminderAsRead","is_read","calculateNextDonationDate","lastDonationDate","lastDonation","nextDonation","setDate","getDate","checkEligibleAchievements","donationCount","allAchievements","userAchievements","existingAchievementIds","map","ua","eligibleAchievements","filter","achievement","includes","criteria","requiredCount","parseInt","split"],"sources":["C:/Users/yatir/finalProjectReact/frontend/src/services/dashboardService.ts"],"sourcesContent":["import { supabase } from './supabaseClient';\r\n\r\n// Types for the dashboard\r\nexport interface Donation {\r\n  id: number;\r\n  user_id: string;\r\n  donation_date: string;\r\n  donation_center: string;\r\n  blood_amount_ml: number;\r\n  donation_type: string;\r\n  notes: string;\r\n  created_at: string;\r\n}\r\n\r\nexport interface DonationGoal {\r\n  id: number;\r\n  user_id: string;\r\n  target_count: number;\r\n  target_date: string | null;\r\n  title: string;\r\n  description: string | null;\r\n  is_completed: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface Achievement {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  icon_url: string;\r\n  criteria: string;\r\n  created_at: string;\r\n}\r\n\r\nexport interface UserAchievement {\r\n  id: number;\r\n  user_id: string;\r\n  achievement_id: number;\r\n  earned_at: string;\r\n  achievement?: Achievement; // Join with achievements table\r\n}\r\n\r\nexport interface DonationReminder {\r\n  id: number;\r\n  user_id: string;\r\n  reminder_date: string;\r\n  title: string;\r\n  message: string | null;\r\n  is_read: boolean;\r\n  created_at: string;\r\n}\r\n\r\n// Donation functions\r\nexport const getUserDonations = async (userId: string): Promise<{ data: Donation[] | null; error: any }> => {\r\n  console.log('Fetching donations for user:', userId);\r\n  const { data, error } = await supabase\r\n    .from('donations')\r\n    .select('*')\r\n    .eq('user_id', userId)\r\n    .order('donation_date', { ascending: false });\r\n  \r\n  if (error) {\r\n    console.error('Error fetching user donations:', error);\r\n  } else {\r\n    console.log(`Retrieved ${data?.length || 0} donations`);\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const addDonation = async (donation: Omit<Donation, 'id' | 'created_at'>): Promise<{ data: Donation | null; error: any }> => {\r\n  console.log('Adding new donation:', donation);\r\n  const { data, error } = await supabase\r\n    .from('donations')\r\n    .insert(donation)\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) {\r\n    console.error('Error adding donation:', error);\r\n  } else {\r\n    console.log('Donation added successfully');\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const updateDonation = async (id: number, updates: Partial<Donation>): Promise<{ data: Donation | null; error: any }> => {\r\n  console.log(`Updating donation ${id}:`, updates);\r\n  const { data, error } = await supabase\r\n    .from('donations')\r\n    .update(updates)\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) {\r\n    console.error('Error updating donation:', error);\r\n  } else {\r\n    console.log('Donation updated successfully');\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const deleteDonation = async (id: number): Promise<{ error: any }> => {\r\n  console.log(`Deleting donation ${id}`);\r\n  const { error } = await supabase\r\n    .from('donations')\r\n    .delete()\r\n    .eq('id', id);\r\n  \r\n  if (error) {\r\n    console.error('Error deleting donation:', error);\r\n  } else {\r\n    console.log('Donation deleted successfully');\r\n  }\r\n  \r\n  return { error };\r\n};\r\n\r\n// Donation Goals functions\r\nexport const getUserDonationGoals = async (userId: string): Promise<{ data: DonationGoal[] | null; error: any }> => {\r\n  console.log('Fetching donation goals for user:', userId);\r\n  const { data, error } = await supabase\r\n    .from('donation_goals')\r\n    .select('*')\r\n    .eq('user_id', userId)\r\n    .order('target_date', { ascending: true });\r\n  \r\n  if (error) {\r\n    console.error('Error fetching user donation goals:', error);\r\n  } else {\r\n    console.log(`Retrieved ${data?.length || 0} donation goals`);\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const addDonationGoal = async (goal: Omit<DonationGoal, 'id' | 'created_at' | 'updated_at'>): Promise<{ data: DonationGoal | null; error: any }> => {\r\n  console.log('Adding new donation goal:', goal);\r\n  const { data, error } = await supabase\r\n    .from('donation_goals')\r\n    .insert(goal)\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) {\r\n    console.error('Error adding donation goal:', error);\r\n  } else {\r\n    console.log('Donation goal added successfully');\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const updateDonationGoal = async (id: number, updates: Partial<DonationGoal>): Promise<{ data: DonationGoal | null; error: any }> => {\r\n  console.log(`Updating donation goal ${id}:`, updates);\r\n  const { data, error } = await supabase\r\n    .from('donation_goals')\r\n    .update({\r\n      ...updates,\r\n      updated_at: new Date().toISOString()\r\n    })\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) {\r\n    console.error('Error updating donation goal:', error);\r\n  } else {\r\n    console.log('Donation goal updated successfully');\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\n// Achievements functions\r\nexport const getAllAchievements = async (): Promise<{ data: Achievement[] | null; error: any }> => {\r\n  console.log('Fetching all achievements');\r\n  const { data, error } = await supabase\r\n    .from('achievements')\r\n    .select('*')\r\n    .order('id');\r\n  \r\n  if (error) {\r\n    console.error('Error fetching achievements:', error);\r\n  } else {\r\n    console.log(`Retrieved ${data?.length || 0} achievements`);\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const getUserAchievements = async (userId: string): Promise<{ data: UserAchievement[] | null; error: any }> => {\r\n  console.log('Fetching achievements for user:', userId);\r\n  const { data, error } = await supabase\r\n    .from('user_achievements')\r\n    .select(`\r\n      *,\r\n      achievement:achievements(*)\r\n    `)\r\n    .eq('user_id', userId)\r\n    .order('earned_at', { ascending: false });\r\n  \r\n  if (error) {\r\n    console.error('Error fetching user achievements:', error);\r\n  } else {\r\n    console.log(`Retrieved ${data?.length || 0} user achievements`);\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const addUserAchievement = async (userId: string, achievementId: number): Promise<{ data: UserAchievement | null; error: any }> => {\r\n  console.log(`Adding achievement ${achievementId} to user ${userId}`);\r\n  const { data, error } = await supabase\r\n    .from('user_achievements')\r\n    .insert({\r\n      user_id: userId,\r\n      achievement_id: achievementId\r\n    })\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) {\r\n    console.error('Error adding user achievement:', error);\r\n  } else {\r\n    console.log('User achievement added successfully');\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\n// Reminders functions\r\nexport const getUserReminders = async (userId: string): Promise<{ data: DonationReminder[] | null; error: any }> => {\r\n  console.log('Fetching reminders for user:', userId);\r\n  const { data, error } = await supabase\r\n    .from('donation_reminders')\r\n    .select('*')\r\n    .eq('user_id', userId)\r\n    .order('reminder_date', { ascending: true });\r\n  \r\n  if (error) {\r\n    console.error('Error fetching user reminders:', error);\r\n  } else {\r\n    console.log(`Retrieved ${data?.length || 0} reminders`);\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const addReminder = async (reminder: Omit<DonationReminder, 'id' | 'created_at'>): Promise<{ data: DonationReminder | null; error: any }> => {\r\n  console.log('Adding new reminder:', reminder);\r\n  const { data, error } = await supabase\r\n    .from('donation_reminders')\r\n    .insert(reminder)\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) {\r\n    console.error('Error adding reminder:', error);\r\n  } else {\r\n    console.log('Reminder added successfully');\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\nexport const markReminderAsRead = async (id: number): Promise<{ data: DonationReminder | null; error: any }> => {\r\n  console.log(`Marking reminder ${id} as read`);\r\n  const { data, error } = await supabase\r\n    .from('donation_reminders')\r\n    .update({ is_read: true })\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) {\r\n    console.error('Error marking reminder as read:', error);\r\n  } else {\r\n    console.log('Reminder marked as read successfully');\r\n  }\r\n  \r\n  return { data, error };\r\n};\r\n\r\n// Utility functions for dashboard\r\nexport const calculateNextDonationDate = (lastDonationDate: string): Date => {\r\n  // Typically, donors can donate whole blood every 56 days (8 weeks)\r\n  const lastDonation = new Date(lastDonationDate);\r\n  const nextDonation = new Date(lastDonation);\r\n  nextDonation.setDate(lastDonation.getDate() + 56);\r\n  return nextDonation;\r\n};\r\n\r\nexport const checkEligibleAchievements = async (userId: string, donationCount: number): Promise<Achievement[]> => {\r\n  console.log(`Checking eligible achievements for user ${userId} with ${donationCount} donations`);\r\n  \r\n  // Get all achievements\r\n  const { data: allAchievements } = await getAllAchievements();\r\n  if (!allAchievements) return [];\r\n  \r\n  // Get user's existing achievements\r\n  const { data: userAchievements } = await getUserAchievements(userId);\r\n  const existingAchievementIds = userAchievements?.map(ua => ua.achievement_id) || [];\r\n  \r\n  // Filter achievements user is eligible for but doesn't have yet\r\n  const eligibleAchievements = allAchievements.filter(achievement => {\r\n    // Skip if user already has this achievement\r\n    if (existingAchievementIds.includes(achievement.id)) return false;\r\n    \r\n    // Check donation count based achievements\r\n    if (achievement.criteria.includes('Complete ')) {\r\n      const requiredCount = parseInt(achievement.criteria.split('Complete ')[1].split(' ')[0]);\r\n      return donationCount >= requiredCount;\r\n    }\r\n    \r\n    return false;\r\n  });\r\n  \r\n  console.log(`Found ${eligibleAchievements.length} eligible achievements`);\r\n  return eligibleAchievements;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}