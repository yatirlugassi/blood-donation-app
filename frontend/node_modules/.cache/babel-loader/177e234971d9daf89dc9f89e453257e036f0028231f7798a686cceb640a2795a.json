{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yatir\\\\finalProjectReact\\\\frontend\\\\src\\\\components\\\\Auth\\\\LoginForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { supabase } from '../../services/supabaseClient';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginForm = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    signIn,\n    user,\n    refreshSession\n  } = useAuth();\n  const navigate = useNavigate();\n\n  // Check if user is already logged in\n  useEffect(() => {\n    const checkSession = async () => {\n      console.log('LoginForm: Checking for existing session...');\n      try {\n        // Use refreshSession from AuthContext instead of direct Supabase call\n        await refreshSession();\n\n        // If we have a user after refreshing the session, redirect to dashboard\n        if (user) {\n          console.log('LoginForm: User already logged in, redirecting to dashboard');\n          navigate('/dashboard');\n        }\n      } catch (error) {\n        console.error('LoginForm: Error checking session:', error);\n      }\n    };\n    checkSession();\n  }, [navigate, refreshSession, user]);\n\n  // Redirect if user becomes logged in\n  useEffect(() => {\n    if (user) {\n      console.log('LoginForm: User detected, redirecting to dashboard');\n      navigate('/dashboard');\n    }\n  }, [user, navigate]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!email || !password) {\n      setErrorMessage('Please enter both email and password');\n      return;\n    }\n    try {\n      console.log('LoginForm: Attempting to sign in user:', email);\n      setIsLoading(true);\n      setErrorMessage('');\n\n      // Test Supabase connection before attempting login\n      console.log('LoginForm: Testing Supabase connection...');\n      const testConnection = await supabase.from('blood_types').select('count');\n      if (testConnection.error) {\n        console.error('LoginForm: Supabase connection test failed:', testConnection.error);\n        setErrorMessage('Database connection error. Please try again later.');\n        return;\n      }\n      console.log('LoginForm: Supabase connection successful, proceeding with login');\n      const {\n        error\n      } = await signIn(email, password);\n      if (error) {\n        console.error('LoginForm: Sign in error:', error);\n        setErrorMessage(error.message || 'Failed to sign in');\n        return;\n      }\n      console.log('LoginForm: Sign in successful, redirecting to dashboard');\n      toast.success('Login successful!');\n\n      // Refresh session to ensure we have the latest user data\n      await refreshSession();\n\n      // Navigate to dashboard\n      navigate('/dashboard', {\n        replace: true\n      });\n    } catch (err) {\n      console.error('LoginForm: Exception during sign in:', err);\n      setErrorMessage(err.message || 'An unexpected error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Log In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"auth-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          required: true,\n          disabled: isLoading,\n          placeholder: \"Enter your email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          required: true,\n          disabled: isLoading,\n          placeholder: \"Enter your password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"auth-button\",\n        disabled: isLoading,\n        children: isLoading ? 'Logging in...' : 'Log In'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-links\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/forgot-password\",\n        children: \"Forgot password?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/register\",\n          children: \"Sign up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginForm, \"/Ff2VT1cvYLoXwWiYRPK46/obns=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["React","useState","useEffect","Link","useNavigate","useAuth","supabase","toast","jsxDEV","_jsxDEV","LoginForm","_s","email","setEmail","password","setPassword","errorMessage","setErrorMessage","isLoading","setIsLoading","signIn","user","refreshSession","navigate","checkSession","console","log","error","handleSubmit","e","preventDefault","testConnection","from","select","message","success","replace","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","onChange","target","required","disabled","placeholder","to","_c","$RefreshReg$"],"sources":["C:/Users/yatir/finalProjectReact/frontend/src/components/Auth/LoginForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { supabase } from '../../services/supabaseClient';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst LoginForm: React.FC = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { signIn, user, refreshSession } = useAuth();\r\n  const navigate = useNavigate();\r\n\r\n  // Check if user is already logged in\r\n  useEffect(() => {\r\n    const checkSession = async () => {\r\n      console.log('LoginForm: Checking for existing session...');\r\n      \r\n      try {\r\n        // Use refreshSession from AuthContext instead of direct Supabase call\r\n        await refreshSession();\r\n        \r\n        // If we have a user after refreshing the session, redirect to dashboard\r\n        if (user) {\r\n          console.log('LoginForm: User already logged in, redirecting to dashboard');\r\n          navigate('/dashboard');\r\n        }\r\n      } catch (error) {\r\n        console.error('LoginForm: Error checking session:', error);\r\n      }\r\n    };\r\n    \r\n    checkSession();\r\n  }, [navigate, refreshSession, user]);\r\n\r\n  // Redirect if user becomes logged in\r\n  useEffect(() => {\r\n    if (user) {\r\n      console.log('LoginForm: User detected, redirecting to dashboard');\r\n      navigate('/dashboard');\r\n    }\r\n  }, [user, navigate]);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!email || !password) {\r\n      setErrorMessage('Please enter both email and password');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      console.log('LoginForm: Attempting to sign in user:', email);\r\n      setIsLoading(true);\r\n      setErrorMessage('');\r\n      \r\n      // Test Supabase connection before attempting login\r\n      console.log('LoginForm: Testing Supabase connection...');\r\n      const testConnection = await supabase.from('blood_types').select('count');\r\n      if (testConnection.error) {\r\n        console.error('LoginForm: Supabase connection test failed:', testConnection.error);\r\n        setErrorMessage('Database connection error. Please try again later.');\r\n        return;\r\n      }\r\n      \r\n      console.log('LoginForm: Supabase connection successful, proceeding with login');\r\n      const { error } = await signIn(email, password);\r\n      \r\n      if (error) {\r\n        console.error('LoginForm: Sign in error:', error);\r\n        setErrorMessage(error.message || 'Failed to sign in');\r\n        return;\r\n      }\r\n      \r\n      console.log('LoginForm: Sign in successful, redirecting to dashboard');\r\n      toast.success('Login successful!');\r\n      \r\n      // Refresh session to ensure we have the latest user data\r\n      await refreshSession();\r\n      \r\n      // Navigate to dashboard\r\n      navigate('/dashboard', { replace: true });\r\n    } catch (err: any) {\r\n      console.error('LoginForm: Exception during sign in:', err);\r\n      setErrorMessage(err.message || 'An unexpected error occurred');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-form-container\">\r\n      <h2>Log In</h2>\r\n      \r\n      {errorMessage && (\r\n        <div className=\"error-message\">\r\n          {errorMessage}\r\n        </div>\r\n      )}\r\n      \r\n      <form onSubmit={handleSubmit} className=\"auth-form\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"email\">Email</label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            required\r\n            disabled={isLoading}\r\n            placeholder=\"Enter your email\"\r\n          />\r\n        </div>\r\n        \r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"password\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            required\r\n            disabled={isLoading}\r\n            placeholder=\"Enter your password\"\r\n          />\r\n        </div>\r\n        \r\n        <button type=\"submit\" className=\"auth-button\" disabled={isLoading}>\r\n          {isLoading ? 'Logging in...' : 'Log In'}\r\n        </button>\r\n      </form>\r\n      \r\n      <div className=\"auth-links\">\r\n        <Link to=\"/forgot-password\">Forgot password?</Link>\r\n        <p>\r\n          Don't have an account? <Link to=\"/register\">Sign up</Link>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}