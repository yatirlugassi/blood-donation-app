{"ast":null,"code":"import React,{useState,useEffect}from'react';import{getRegionalData}from'../services/supabaseClient';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const RegionalDistribution=()=>{const[regionalData,setRegionalData]=useState([]);const[selectedRegion,setSelectedRegion]=useState('');const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{const fetchRegionalData=async()=>{try{setLoading(true);console.log('Fetching regional data...');const{data,error}=await getRegionalData();if(error){console.error('Supabase error:',error);throw error;}console.log('Regional data received:',data);if(!data||data.length===0){throw new Error('No regional data available');}setRegionalData(data);setSelectedRegion(data[0].region);}catch(err){console.error('Error fetching regional data:',err);setError('Failed to load regional blood type distribution data. Please make sure your Supabase database is properly set up with the regional_blood_data table.');}finally{setLoading(false);}};fetchRegionalData();},[]);// Get the data for the currently selected region\nconst getSelectedRegionData=()=>{return regionalData.find(region=>region.region===selectedRegion);};// Format percentage for display\nconst formatPercentage=value=>{return`${value.toFixed(1)}%`;};// Get blood type data in a format suitable for display\nconst getBloodTypeData=()=>{const selectedData=getSelectedRegionData();if(!selectedData)return[];return[{type:'A+',percentage:selectedData.a_positive},{type:'A-',percentage:selectedData.a_negative},{type:'B+',percentage:selectedData.b_positive},{type:'B-',percentage:selectedData.b_negative},{type:'AB+',percentage:selectedData.ab_positive},{type:'AB-',percentage:selectedData.ab_negative},{type:'O+',percentage:selectedData.o_positive},{type:'O-',percentage:selectedData.o_negative}].sort((a,b)=>b.percentage-a.percentage);// Sort by percentage (highest first)\n};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"loading-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Loading regional data...\"})]})});}if(error){return/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"error-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"error-icon\",children:\"!\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"Error Loading Data\"}),/*#__PURE__*/_jsx(\"p\",{children:error}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>window.location.reload(),className:\"retry-button\",children:\"Try Again\"})]})});}const selectedData=getSelectedRegionData();const bloodTypeData=getBloodTypeData();return/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"regional-distribution\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"page-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Regional Blood Type Distribution\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Explore blood type distribution across different regions\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"region-selector\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"region\",children:\"Select Region:\"}),/*#__PURE__*/_jsx(\"select\",{id:\"region\",value:selectedRegion,onChange:e=>setSelectedRegion(e.target.value),className:\"region-select\",children:regionalData.map(region=>/*#__PURE__*/_jsx(\"option\",{value:region.region,children:region.region},region.id))})]}),selectedData&&/*#__PURE__*/_jsxs(\"div\",{className:\"region-data\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"region-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:selectedData.region}),/*#__PURE__*/_jsxs(\"p\",{className:\"population\",children:[\"Population: \",selectedData.population.toLocaleString()]}),/*#__PURE__*/_jsxs(\"p\",{className:\"updated-date\",children:[\"Last Updated: \",new Date(selectedData.updated_at).toLocaleDateString()]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"blood-type-distribution\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Blood Type Distribution\"}),/*#__PURE__*/_jsx(\"div\",{className:\"distribution-chart\",children:bloodTypeData.map(bloodType=>/*#__PURE__*/_jsxs(\"div\",{className:\"chart-bar\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"bar\",style:{width:`${bloodType.percentage*3}px`},title:`${bloodType.type}: ${formatPercentage(bloodType.percentage)}`}),/*#__PURE__*/_jsxs(\"div\",{className:\"bar-label\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"type\",children:bloodType.type}),/*#__PURE__*/_jsx(\"span\",{className:\"percentage\",children:formatPercentage(bloodType.percentage)})]})]},bloodType.type))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"distribution-info\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Important Notes\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Blood type distribution varies by ethnicity and region.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"O+ is typically the most common blood type in most populations.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"AB- is typically the rarest blood type in most populations.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Understanding the distribution helps blood banks maintain appropriate supplies.\"})]})]})]})]})});};export default RegionalDistribution;","map":{"version":3,"names":["React","useState","useEffect","getRegionalData","jsx","_jsx","jsxs","_jsxs","RegionalDistribution","regionalData","setRegionalData","selectedRegion","setSelectedRegion","loading","setLoading","error","setError","fetchRegionalData","console","log","data","length","Error","region","err","getSelectedRegionData","find","formatPercentage","value","toFixed","getBloodTypeData","selectedData","type","percentage","a_positive","a_negative","b_positive","b_negative","ab_positive","ab_negative","o_positive","o_negative","sort","a","b","className","children","onClick","window","location","reload","bloodTypeData","htmlFor","id","onChange","e","target","map","population","toLocaleString","Date","updated_at","toLocaleDateString","bloodType","style","width","title"],"sources":["C:/Users/yatir/finalProjectReact/frontend/src/components/RegionalDistribution.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getRegionalData, RegionalData } from '../services/supabaseClient';\r\n\r\nconst RegionalDistribution: React.FC = () => {\r\n  const [regionalData, setRegionalData] = useState<RegionalData[]>([]);\r\n  const [selectedRegion, setSelectedRegion] = useState<string>('');\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchRegionalData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        console.log('Fetching regional data...');\r\n        const { data, error } = await getRegionalData();\r\n        \r\n        if (error) {\r\n          console.error('Supabase error:', error);\r\n          throw error;\r\n        }\r\n        \r\n        console.log('Regional data received:', data);\r\n        \r\n        if (!data || data.length === 0) {\r\n          throw new Error('No regional data available');\r\n        }\r\n        \r\n        setRegionalData(data);\r\n        setSelectedRegion(data[0].region);\r\n      } catch (err: any) {\r\n        console.error('Error fetching regional data:', err);\r\n        setError('Failed to load regional blood type distribution data. Please make sure your Supabase database is properly set up with the regional_blood_data table.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchRegionalData();\r\n  }, []);\r\n\r\n  // Get the data for the currently selected region\r\n  const getSelectedRegionData = () => {\r\n    return regionalData.find(region => region.region === selectedRegion);\r\n  };\r\n\r\n  // Format percentage for display\r\n  const formatPercentage = (value: number) => {\r\n    return `${value.toFixed(1)}%`;\r\n  };\r\n\r\n  // Get blood type data in a format suitable for display\r\n  const getBloodTypeData = () => {\r\n    const selectedData = getSelectedRegionData();\r\n    if (!selectedData) return [];\r\n\r\n    return [\r\n      { type: 'A+', percentage: selectedData.a_positive },\r\n      { type: 'A-', percentage: selectedData.a_negative },\r\n      { type: 'B+', percentage: selectedData.b_positive },\r\n      { type: 'B-', percentage: selectedData.b_negative },\r\n      { type: 'AB+', percentage: selectedData.ab_positive },\r\n      { type: 'AB-', percentage: selectedData.ab_negative },\r\n      { type: 'O+', percentage: selectedData.o_positive },\r\n      { type: 'O-', percentage: selectedData.o_negative }\r\n    ].sort((a, b) => b.percentage - a.percentage); // Sort by percentage (highest first)\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"loading-container\">\r\n          <div className=\"loading-spinner\"></div>\r\n          <p>Loading regional data...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"error-container\">\r\n          <div className=\"error-icon\">!</div>\r\n          <h2>Error Loading Data</h2>\r\n          <p>{error}</p>\r\n          <button onClick={() => window.location.reload()} className=\"retry-button\">\r\n            Try Again\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const selectedData = getSelectedRegionData();\r\n  const bloodTypeData = getBloodTypeData();\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"regional-distribution\">\r\n        <div className=\"page-header\">\r\n          <h1>Regional Blood Type Distribution</h1>\r\n          <p>Explore blood type distribution across different regions</p>\r\n        </div>\r\n        \r\n        <div className=\"region-selector\">\r\n          <label htmlFor=\"region\">Select Region:</label>\r\n          <select\r\n            id=\"region\"\r\n            value={selectedRegion}\r\n            onChange={(e) => setSelectedRegion(e.target.value)}\r\n            className=\"region-select\"\r\n          >\r\n            {regionalData.map((region) => (\r\n              <option key={region.id} value={region.region}>\r\n                {region.region}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {selectedData && (\r\n          <div className=\"region-data\">\r\n            <div className=\"region-header\">\r\n              <h2>{selectedData.region}</h2>\r\n              <p className=\"population\">Population: {selectedData.population.toLocaleString()}</p>\r\n              <p className=\"updated-date\">Last Updated: {new Date(selectedData.updated_at).toLocaleDateString()}</p>\r\n            </div>\r\n            \r\n            <div className=\"blood-type-distribution\">\r\n              <h3>Blood Type Distribution</h3>\r\n              <div className=\"distribution-chart\">\r\n                {bloodTypeData.map((bloodType) => (\r\n                  <div key={bloodType.type} className=\"chart-bar\">\r\n                    <div \r\n                      className=\"bar\" \r\n                      style={{ width: `${bloodType.percentage * 3}px` }}\r\n                      title={`${bloodType.type}: ${formatPercentage(bloodType.percentage)}`}\r\n                    ></div>\r\n                    <div className=\"bar-label\">\r\n                      <span className=\"type\">{bloodType.type}</span>\r\n                      <span className=\"percentage\">{formatPercentage(bloodType.percentage)}</span>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"distribution-info\">\r\n              <h3>Important Notes</h3>\r\n              <ul>\r\n                <li>Blood type distribution varies by ethnicity and region.</li>\r\n                <li>O+ is typically the most common blood type in most populations.</li>\r\n                <li>AB- is typically the rarest blood type in most populations.</li>\r\n                <li>Understanding the distribution helps blood banks maintain appropriate supplies.</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegionalDistribution; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}