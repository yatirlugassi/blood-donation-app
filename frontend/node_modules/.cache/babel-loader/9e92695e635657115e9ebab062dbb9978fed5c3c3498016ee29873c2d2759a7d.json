{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yatir\\\\finalProjectReact\\\\frontend\\\\src\\\\components\\\\Auth\\\\AdminRoute.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { supabase } from '../../services/supabaseClient';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AdminRoute = ({\n  children\n}) => {\n  _s();\n  const {\n    user,\n    loading\n  } = useAuth();\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [checkingAdmin, setCheckingAdmin] = useState(true);\n  useEffect(() => {\n    const checkAdminStatus = async () => {\n      if (!user) {\n        setCheckingAdmin(false);\n        return;\n      }\n      try {\n        // Check if the user is an admin from the user_profiles table\n        const {\n          data,\n          error\n        } = await supabase.from('user_profiles').select('is_admin').eq('id', user.id).single();\n        if (error) {\n          console.error('Error checking admin status:', error);\n          setIsAdmin(false);\n        } else {\n          setIsAdmin((data === null || data === void 0 ? void 0 : data.is_admin) || false);\n        }\n      } catch (error) {\n        console.error('Error in admin check:', error);\n        setIsAdmin(false);\n      } finally {\n        setCheckingAdmin(false);\n      }\n    };\n    checkAdminStatus();\n  }, [user]);\n  if (loading || checkingAdmin) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Verifying permissions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n  if (!isAdmin) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/dashboard\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n_s(AdminRoute, \"1ZN08nic5Kz2KrgcGuHMKWJ02KY=\", false, function () {\n  return [useAuth];\n});\n_c = AdminRoute;\nexport default AdminRoute;\nvar _c;\n$RefreshReg$(_c, \"AdminRoute\");","map":{"version":3,"names":["React","useState","useEffect","Navigate","useAuth","supabase","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminRoute","children","_s","user","loading","isAdmin","setIsAdmin","checkingAdmin","setCheckingAdmin","checkAdminStatus","data","error","from","select","eq","id","single","console","is_admin","className","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","_c","$RefreshReg$"],"sources":["C:/Users/yatir/finalProjectReact/frontend/src/components/Auth/AdminRoute.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { supabase } from '../../services/supabaseClient';\r\n\r\ninterface AdminRouteProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst AdminRoute: React.FC<AdminRouteProps> = ({ children }) => {\r\n  const { user, loading } = useAuth();\r\n  const [isAdmin, setIsAdmin] = useState<boolean>(false);\r\n  const [checkingAdmin, setCheckingAdmin] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    const checkAdminStatus = async () => {\r\n      if (!user) {\r\n        setCheckingAdmin(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // Check if the user is an admin from the user_profiles table\r\n        const { data, error } = await supabase\r\n          .from('user_profiles')\r\n          .select('is_admin')\r\n          .eq('id', user.id)\r\n          .single();\r\n\r\n        if (error) {\r\n          console.error('Error checking admin status:', error);\r\n          setIsAdmin(false);\r\n        } else {\r\n          setIsAdmin(data?.is_admin || false);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error in admin check:', error);\r\n        setIsAdmin(false);\r\n      } finally {\r\n        setCheckingAdmin(false);\r\n      }\r\n    };\r\n\r\n    checkAdminStatus();\r\n  }, [user]);\r\n\r\n  if (loading || checkingAdmin) {\r\n    return (\r\n      <div className=\"loading-container\">\r\n        <div className=\"spinner\"></div>\r\n        <p>Verifying permissions...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!user) {\r\n    return <Navigate to=\"/login\" replace />;\r\n  }\r\n\r\n  if (!isAdmin) {\r\n    return <Navigate to=\"/dashboard\" replace />;\r\n  }\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default AdminRoute; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}