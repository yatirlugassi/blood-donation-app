{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yatir\\\\finalProjectReact\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase, getUserProfile, createUserProfile } from '../services/supabaseClient';\n\n// Define the shape of our auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context with a default undefined value\nconst AuthContext = /*#__PURE__*/createContext(undefined);\n\n// Props for the AuthProvider component\n\n// AuthProvider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [session, setSession] = useState(null);\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initialize the auth state\n  useEffect(() => {\n    setLoading(true);\n\n    // Get the current session\n    const fetchSession = async () => {\n      try {\n        const {\n          data: {\n            session\n          },\n          error\n        } = await supabase.auth.getSession();\n        if (error) {\n          throw error;\n        }\n        setSession(session);\n        setUser((session === null || session === void 0 ? void 0 : session.user) || null);\n\n        // Fetch user profile if user exists\n        if (session !== null && session !== void 0 && session.user) {\n          const {\n            data,\n            error: profileError\n          } = await getUserProfile(session.user.id);\n          if (profileError) {\n            console.error('Error fetching user profile:', profileError);\n          } else {\n            setProfile(data);\n          }\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error.message);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSession();\n\n    // Set up a listener for auth state changes\n    const {\n      data: authListener\n    } = supabase.auth.onAuthStateChange(async (event, newSession) => {\n      setSession(newSession);\n      setUser((newSession === null || newSession === void 0 ? void 0 : newSession.user) || null);\n      setLoading(true);\n      if (event === 'SIGNED_IN' && newSession !== null && newSession !== void 0 && newSession.user) {\n        // Check if profile exists\n        const {\n          data,\n          error: profileError\n        } = await getUserProfile(newSession.user.id);\n        if (profileError || !data) {\n          // Create new profile if it doesn't exist\n          const {\n            data: newProfile,\n            error: createError\n          } = await createUserProfile({\n            id: newSession.user.id,\n            blood_type: null,\n            region: null,\n            donation_count: 0,\n            last_donation_date: null\n          });\n          if (createError) {\n            console.error('Error creating user profile:', createError);\n          } else {\n            setProfile(newProfile);\n          }\n        } else {\n          setProfile(data);\n        }\n      } else if (event === 'SIGNED_OUT') {\n        setProfile(null);\n      }\n      setLoading(false);\n    });\n\n    // Clean up subscription on unmount\n    return () => {\n      authListener === null || authListener === void 0 ? void 0 : authListener.subscription.unsubscribe();\n    };\n  }, []);\n\n  // Sign up with email and password\n  const signUp = async (email, password) => {\n    try {\n      setLoading(true);\n      // Disable email verification by setting emailRedirectTo to the current URL\n      // and setting the data.email_confirmed_at to the current time\n      const {\n        error\n      } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          // This will skip email verification\n          data: {\n            email_confirmed: true\n          }\n        }\n      });\n      if (!error) {\n        // Auto sign in after signup\n        await supabase.auth.signInWithPassword({\n          email,\n          password\n        });\n      }\n      return {\n        error\n      };\n    } catch (error) {\n      console.error('Error signing up:', error.message);\n      return {\n        error\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Sign in with email and password\n  const signIn = async (email, password) => {\n    try {\n      setLoading(true);\n      const {\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      return {\n        error\n      };\n    } catch (error) {\n      console.error('Error signing in:', error.message);\n      return {\n        error\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Sign out\n  const signOut = async () => {\n    try {\n      setLoading(true);\n      await supabase.auth.signOut();\n      setProfile(null);\n    } catch (error) {\n      console.error('Error signing out:', error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reset password\n  const resetPassword = async email => {\n    try {\n      setLoading(true);\n      const {\n        error\n      } = await supabase.auth.resetPasswordForEmail(email);\n      return {\n        error\n      };\n    } catch (error) {\n      console.error('Error resetting password:', error.message);\n      return {\n        error\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async updates => {\n    try {\n      setLoading(true);\n      if (!user) {\n        return {\n          error: new Error('No user logged in')\n        };\n      }\n      const {\n        data,\n        error\n      } = await supabase.from('user_profiles').update(updates).eq('id', user.id).select().single();\n      if (error) {\n        throw error;\n      }\n      setProfile(data);\n      return {\n        error: null\n      };\n    } catch (error) {\n      console.error('Error updating profile:', error.message);\n      return {\n        error\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Provide the auth context value\n  const value = {\n    session,\n    user,\n    profile,\n    loading,\n    error,\n    signUp,\n    signIn,\n    signOut,\n    resetPassword,\n    updateProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook to use the auth context\n_s(AuthProvider, \"dWDCAND/983j+iFrIFYEmcKfP9Y=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","getUserProfile","createUserProfile","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","session","setSession","user","setUser","profile","setProfile","loading","setLoading","error","setError","fetchSession","data","auth","getSession","profileError","id","console","message","authListener","onAuthStateChange","event","newSession","newProfile","createError","blood_type","region","donation_count","last_donation_date","subscription","unsubscribe","signUp","email","password","options","email_confirmed","signInWithPassword","signIn","signOut","resetPassword","resetPasswordForEmail","updateProfile","updates","Error","from","update","eq","select","single","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/yatir/finalProjectReact/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { Session, User } from '@supabase/supabase-js';\r\nimport { supabase, UserProfile, getUserProfile, createUserProfile } from '../services/supabaseClient';\r\n\r\n// Define the shape of our auth context\r\ninterface AuthContextType {\r\n  session: Session | null;\r\n  user: User | null;\r\n  profile: UserProfile | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  signUp: (email: string, password: string) => Promise<{ error: any }>;\r\n  signIn: (email: string, password: string) => Promise<{ error: any }>;\r\n  signOut: () => Promise<void>;\r\n  resetPassword: (email: string) => Promise<{ error: any }>;\r\n  updateProfile: (updates: Partial<UserProfile>) => Promise<{ error: any }>;\r\n}\r\n\r\n// Create the context with a default undefined value\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\n// Props for the AuthProvider component\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n// AuthProvider component\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [session, setSession] = useState<Session | null>(null);\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [profile, setProfile] = useState<UserProfile | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Initialize the auth state\r\n  useEffect(() => {\r\n    setLoading(true);\r\n\r\n    // Get the current session\r\n    const fetchSession = async () => {\r\n      try {\r\n        const { data: { session }, error } = await supabase.auth.getSession();\r\n        \r\n        if (error) {\r\n          throw error;\r\n        }\r\n\r\n        setSession(session);\r\n        setUser(session?.user || null);\r\n\r\n        // Fetch user profile if user exists\r\n        if (session?.user) {\r\n          const { data, error: profileError } = await getUserProfile(session.user.id);\r\n          \r\n          if (profileError) {\r\n            console.error('Error fetching user profile:', profileError);\r\n          } else {\r\n            setProfile(data);\r\n          }\r\n        }\r\n      } catch (error: any) {\r\n        console.error('Error initializing auth:', error.message);\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchSession();\r\n\r\n    // Set up a listener for auth state changes\r\n    const { data: authListener } = supabase.auth.onAuthStateChange(async (event, newSession) => {\r\n      setSession(newSession);\r\n      setUser(newSession?.user || null);\r\n      setLoading(true);\r\n\r\n      if (event === 'SIGNED_IN' && newSession?.user) {\r\n        // Check if profile exists\r\n        const { data, error: profileError } = await getUserProfile(newSession.user.id);\r\n        \r\n        if (profileError || !data) {\r\n          // Create new profile if it doesn't exist\r\n          const { data: newProfile, error: createError } = await createUserProfile({\r\n            id: newSession.user.id,\r\n            blood_type: null,\r\n            region: null,\r\n            donation_count: 0,\r\n            last_donation_date: null,\r\n          });\r\n          \r\n          if (createError) {\r\n            console.error('Error creating user profile:', createError);\r\n          } else {\r\n            setProfile(newProfile);\r\n          }\r\n        } else {\r\n          setProfile(data);\r\n        }\r\n      } else if (event === 'SIGNED_OUT') {\r\n        setProfile(null);\r\n      }\r\n      \r\n      setLoading(false);\r\n    });\r\n\r\n    // Clean up subscription on unmount\r\n    return () => {\r\n      authListener?.subscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  // Sign up with email and password\r\n  const signUp = async (email: string, password: string) => {\r\n    try {\r\n      setLoading(true);\r\n      // Disable email verification by setting emailRedirectTo to the current URL\r\n      // and setting the data.email_confirmed_at to the current time\r\n      const { error } = await supabase.auth.signUp({ \r\n        email, \r\n        password,\r\n        options: {\r\n          // This will skip email verification\r\n          data: {\r\n            email_confirmed: true\r\n          }\r\n        }\r\n      });\r\n      \r\n      if (!error) {\r\n        // Auto sign in after signup\r\n        await supabase.auth.signInWithPassword({ email, password });\r\n      }\r\n      \r\n      return { error };\r\n    } catch (error: any) {\r\n      console.error('Error signing up:', error.message);\r\n      return { error };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Sign in with email and password\r\n  const signIn = async (email: string, password: string) => {\r\n    try {\r\n      setLoading(true);\r\n      const { error } = await supabase.auth.signInWithPassword({ email, password });\r\n      return { error };\r\n    } catch (error: any) {\r\n      console.error('Error signing in:', error.message);\r\n      return { error };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Sign out\r\n  const signOut = async () => {\r\n    try {\r\n      setLoading(true);\r\n      await supabase.auth.signOut();\r\n      setProfile(null);\r\n    } catch (error: any) {\r\n      console.error('Error signing out:', error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Reset password\r\n  const resetPassword = async (email: string) => {\r\n    try {\r\n      setLoading(true);\r\n      const { error } = await supabase.auth.resetPasswordForEmail(email);\r\n      return { error };\r\n    } catch (error: any) {\r\n      console.error('Error resetting password:', error.message);\r\n      return { error };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Update user profile\r\n  const updateProfile = async (updates: Partial<UserProfile>) => {\r\n    try {\r\n      setLoading(true);\r\n      if (!user) {\r\n        return { error: new Error('No user logged in') };\r\n      }\r\n\r\n      const { data, error } = await supabase\r\n        .from('user_profiles')\r\n        .update(updates)\r\n        .eq('id', user.id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      setProfile(data);\r\n      return { error: null };\r\n    } catch (error: any) {\r\n      console.error('Error updating profile:', error.message);\r\n      return { error };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Provide the auth context value\r\n  const value = {\r\n    session,\r\n    user,\r\n    profile,\r\n    loading,\r\n    error,\r\n    signUp,\r\n    signIn,\r\n    signOut,\r\n    resetPassword,\r\n    updateProfile,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  \r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  \r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}